generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            String @id @db.VarChar(255)
  user_name          String @db.VarChar(255)
  user_avatar        String
  user_token         String
  user_token_refresh String
  token              String
  token_key          String
  limit              Int    @default(100)

  @@index([user_id], map: "users_user_id")
  @@map("users")
}

model Godfather {
  id       Int    @id @default(autoincrement())
  user_id  String @unique @db.VarChar(255)
  emoji_id String @db.VarChar(255)

  @@index([user_id], map: "godfathers_user_id")
  @@map("godfathers")
}

model Proposal {
  id            Int           @id @default(autoincrement())
  user_id       String?       @db.VarChar(255)
  message_id    String?       @unique @db.VarChar(255)
  type          ProposalType
  joke_id       Int?          @unique
  joke_type     String?       @db.VarChar(255)
  joke_question String?       @db.VarChar(255)
  joke_answer   String?       @db.VarChar(255)
  merged        Boolean       @default(false)
  refused       Boolean       @default(false)
  stale         Boolean       @default(false)
  created_at    DateTime      @default(now())
  approvals     Approval[]
  disapprovals  Disapproval[]
  votes         Vote[]

  suggestion_id Int?       @unique
  suggestion    Proposal?  @relation("ProposalToCorrections", fields: [suggestion_id], references: [id], onDelete: Cascade)
  corrections   Proposal[] @relation("ProposalToCorrections")
  reports       Report[]   @relation("ProposalToReports")

  @@map("proposals")
}

model Approval {
  proposal_id Int
  user_id     String   @db.VarChar(255)
  proposal    Proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade)

  @@id([proposal_id, user_id])
  @@index([proposal_id], map: "approvals_proposal_id")
  @@map("approvals")
}

model Disapproval {
  proposal_id Int
  user_id     String   @db.VarChar(255)
  proposal    Proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade)

  @@id([proposal_id, user_id])
  @@index([proposal_id], map: "disapprovals_proposal_id")
  @@map("disapprovals")
}

model Vote {
  proposal_id Int
  user_id     String   @db.VarChar(255)
  type        VoteType
  proposal    Proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade)

  @@id([proposal_id, user_id])
  @@index([proposal_id], name: "votes_proposal_id")
  @@map("votes")
}

model Report {
  suggestion_id Int        @unique
  message_id    String     @unique
  user_id       String     @db.VarChar(255)
  type          ReportType
  suggestion    Proposal   @relation("ProposalToReports", fields: [suggestion_id], references: [suggestion_id])

  @@id([suggestion_id, user_id])
  @@index([suggestion_id], name: "reports_proposal_id")
  @@map("reports")
}

enum ProposalType {
  SUGGESTION
  CORRECTION
  SUGGESTION_CORRECTION
}

enum ReportType {
  DUPLICATE
  INAPPROPRIATE
}

enum VoteType {
  UP
  DOWN
}
