
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  user_id: string
  user_name: string
  user_avatar: string
  user_token: string
  user_token_refresh: string
  token: string
  token_key: string
  limit: number
}

/**
 * Model Godfather
 * 
 */
export type Godfather = {
  id: number
  user_id: string
  emoji_id: string
}

/**
 * Model Proposal
 * 
 */
export type Proposal = {
  id: number
  user_id: string | null
  message_id: string | null
  type: ProposalType
  joke_id: number | null
  joke_type: string | null
  joke_question: string | null
  joke_answer: string | null
  merged: boolean
  refused: boolean
  stale: boolean
  created_at: Date
  suggestion_id: number | null
}

/**
 * Model Approval
 * 
 */
export type Approval = {
  proposal_id: number
  user_id: string
}

/**
 * Model Disapproval
 * 
 */
export type Disapproval = {
  proposal_id: number
  user_id: string
}

/**
 * Model Vote
 * 
 */
export type Vote = {
  proposal_id: number
  user_id: string
  type: VoteType
}

/**
 * Model Report
 * 
 */
export type Report = {
  suggestion_id: number
  message_id: string
  user_id: string
  type: ReportType
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ProposalType: {
  SUGGESTION: 'SUGGESTION',
  CORRECTION: 'CORRECTION',
  SUGGESTION_CORRECTION: 'SUGGESTION_CORRECTION'
};

export type ProposalType = (typeof ProposalType)[keyof typeof ProposalType]


export const VoteType: {
  UP: 'UP',
  DOWN: 'DOWN'
};

export type VoteType = (typeof VoteType)[keyof typeof VoteType]


export const ReportType: {
  DUPLICATE: 'DUPLICATE',
  INAPPROPRIATE: 'INAPPROPRIATE'
};

export type ReportType = (typeof ReportType)[keyof typeof ReportType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.godfather`: Exposes CRUD operations for the **Godfather** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Godfathers
    * const godfathers = await prisma.godfather.findMany()
    * ```
    */
  get godfather(): Prisma.GodfatherDelegate<GlobalReject>;

  /**
   * `prisma.proposal`: Exposes CRUD operations for the **Proposal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Proposals
    * const proposals = await prisma.proposal.findMany()
    * ```
    */
  get proposal(): Prisma.ProposalDelegate<GlobalReject>;

  /**
   * `prisma.approval`: Exposes CRUD operations for the **Approval** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Approvals
    * const approvals = await prisma.approval.findMany()
    * ```
    */
  get approval(): Prisma.ApprovalDelegate<GlobalReject>;

  /**
   * `prisma.disapproval`: Exposes CRUD operations for the **Disapproval** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Disapprovals
    * const disapprovals = await prisma.disapproval.findMany()
    * ```
    */
  get disapproval(): Prisma.DisapprovalDelegate<GlobalReject>;

  /**
   * `prisma.vote`: Exposes CRUD operations for the **Vote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votes
    * const votes = await prisma.vote.findMany()
    * ```
    */
  get vote(): Prisma.VoteDelegate<GlobalReject>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.1.0
   * Query Engine version: 8d8414deb360336e4698a65aa45a1fbaf1ce13d8
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Godfather: 'Godfather',
    Proposal: 'Proposal',
    Approval: 'Approval',
    Disapproval: 'Disapproval',
    Vote: 'Vote',
    Report: 'Report'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProposalCountOutputType
   */


  export type ProposalCountOutputType = {
    approvals: number
    disapprovals: number
    votes: number
    corrections: number
    reports: number
  }

  export type ProposalCountOutputTypeSelect = {
    approvals?: boolean
    disapprovals?: boolean
    votes?: boolean
    corrections?: boolean
    reports?: boolean
  }

  export type ProposalCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProposalCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProposalCountOutputType
    : S extends undefined
    ? never
    : S extends ProposalCountOutputTypeArgs
    ?'include' extends U
    ? ProposalCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProposalCountOutputType ? ProposalCountOutputType[P] : never
  } 
    : ProposalCountOutputType
  : ProposalCountOutputType




  // Custom InputTypes

  /**
   * ProposalCountOutputType without action
   */
  export type ProposalCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProposalCountOutputType
     * 
    **/
    select?: ProposalCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    limit: number | null
  }

  export type UserSumAggregateOutputType = {
    limit: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: string | null
    user_name: string | null
    user_avatar: string | null
    user_token: string | null
    user_token_refresh: string | null
    token: string | null
    token_key: string | null
    limit: number | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: string | null
    user_name: string | null
    user_avatar: string | null
    user_token: string | null
    user_token_refresh: string | null
    token: string | null
    token_key: string | null
    limit: number | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    user_name: number
    user_avatar: number
    user_token: number
    user_token_refresh: number
    token: number
    token_key: number
    limit: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    limit?: true
  }

  export type UserSumAggregateInputType = {
    limit?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    user_name?: true
    user_avatar?: true
    user_token?: true
    user_token_refresh?: true
    token?: true
    token_key?: true
    limit?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    user_name?: true
    user_avatar?: true
    user_token?: true
    user_token_refresh?: true
    token?: true
    token_key?: true
    limit?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    user_name?: true
    user_avatar?: true
    user_token?: true
    user_token_refresh?: true
    token?: true
    token_key?: true
    limit?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    user_id: string
    user_name: string
    user_avatar: string
    user_token: string
    user_token_refresh: string
    token: string
    token_key: string
    limit: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    user_id?: boolean
    user_name?: boolean
    user_avatar?: boolean
    user_token?: boolean
    user_token_refresh?: boolean
    token?: boolean
    token_key?: boolean
    limit?: boolean
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
  }



  /**
   * Model Godfather
   */


  export type AggregateGodfather = {
    _count: GodfatherCountAggregateOutputType | null
    _avg: GodfatherAvgAggregateOutputType | null
    _sum: GodfatherSumAggregateOutputType | null
    _min: GodfatherMinAggregateOutputType | null
    _max: GodfatherMaxAggregateOutputType | null
  }

  export type GodfatherAvgAggregateOutputType = {
    id: number | null
  }

  export type GodfatherSumAggregateOutputType = {
    id: number | null
  }

  export type GodfatherMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    emoji_id: string | null
  }

  export type GodfatherMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    emoji_id: string | null
  }

  export type GodfatherCountAggregateOutputType = {
    id: number
    user_id: number
    emoji_id: number
    _all: number
  }


  export type GodfatherAvgAggregateInputType = {
    id?: true
  }

  export type GodfatherSumAggregateInputType = {
    id?: true
  }

  export type GodfatherMinAggregateInputType = {
    id?: true
    user_id?: true
    emoji_id?: true
  }

  export type GodfatherMaxAggregateInputType = {
    id?: true
    user_id?: true
    emoji_id?: true
  }

  export type GodfatherCountAggregateInputType = {
    id?: true
    user_id?: true
    emoji_id?: true
    _all?: true
  }

  export type GodfatherAggregateArgs = {
    /**
     * Filter which Godfather to aggregate.
     * 
    **/
    where?: GodfatherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Godfathers to fetch.
     * 
    **/
    orderBy?: Enumerable<GodfatherOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GodfatherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Godfathers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Godfathers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Godfathers
    **/
    _count?: true | GodfatherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GodfatherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GodfatherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GodfatherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GodfatherMaxAggregateInputType
  }

  export type GetGodfatherAggregateType<T extends GodfatherAggregateArgs> = {
        [P in keyof T & keyof AggregateGodfather]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGodfather[P]>
      : GetScalarType<T[P], AggregateGodfather[P]>
  }




  export type GodfatherGroupByArgs = {
    where?: GodfatherWhereInput
    orderBy?: Enumerable<GodfatherOrderByWithAggregationInput>
    by: Array<GodfatherScalarFieldEnum>
    having?: GodfatherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GodfatherCountAggregateInputType | true
    _avg?: GodfatherAvgAggregateInputType
    _sum?: GodfatherSumAggregateInputType
    _min?: GodfatherMinAggregateInputType
    _max?: GodfatherMaxAggregateInputType
  }


  export type GodfatherGroupByOutputType = {
    id: number
    user_id: string
    emoji_id: string
    _count: GodfatherCountAggregateOutputType | null
    _avg: GodfatherAvgAggregateOutputType | null
    _sum: GodfatherSumAggregateOutputType | null
    _min: GodfatherMinAggregateOutputType | null
    _max: GodfatherMaxAggregateOutputType | null
  }

  type GetGodfatherGroupByPayload<T extends GodfatherGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GodfatherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GodfatherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GodfatherGroupByOutputType[P]>
            : GetScalarType<T[P], GodfatherGroupByOutputType[P]>
        }
      >
    >


  export type GodfatherSelect = {
    id?: boolean
    user_id?: boolean
    emoji_id?: boolean
  }

  export type GodfatherGetPayload<
    S extends boolean | null | undefined | GodfatherArgs,
    U = keyof S
      > = S extends true
        ? Godfather
    : S extends undefined
    ? never
    : S extends GodfatherArgs | GodfatherFindManyArgs
    ?'include' extends U
    ? Godfather 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Godfather ? Godfather[P] : never
  } 
    : Godfather
  : Godfather


  type GodfatherCountArgs = Merge<
    Omit<GodfatherFindManyArgs, 'select' | 'include'> & {
      select?: GodfatherCountAggregateInputType | true
    }
  >

  export interface GodfatherDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Godfather that matches the filter.
     * @param {GodfatherFindUniqueArgs} args - Arguments to find a Godfather
     * @example
     * // Get one Godfather
     * const godfather = await prisma.godfather.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GodfatherFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GodfatherFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Godfather'> extends True ? CheckSelect<T, Prisma__GodfatherClient<Godfather>, Prisma__GodfatherClient<GodfatherGetPayload<T>>> : CheckSelect<T, Prisma__GodfatherClient<Godfather | null >, Prisma__GodfatherClient<GodfatherGetPayload<T> | null >>

    /**
     * Find the first Godfather that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GodfatherFindFirstArgs} args - Arguments to find a Godfather
     * @example
     * // Get one Godfather
     * const godfather = await prisma.godfather.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GodfatherFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GodfatherFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Godfather'> extends True ? CheckSelect<T, Prisma__GodfatherClient<Godfather>, Prisma__GodfatherClient<GodfatherGetPayload<T>>> : CheckSelect<T, Prisma__GodfatherClient<Godfather | null >, Prisma__GodfatherClient<GodfatherGetPayload<T> | null >>

    /**
     * Find zero or more Godfathers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GodfatherFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Godfathers
     * const godfathers = await prisma.godfather.findMany()
     * 
     * // Get first 10 Godfathers
     * const godfathers = await prisma.godfather.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const godfatherWithIdOnly = await prisma.godfather.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GodfatherFindManyArgs>(
      args?: SelectSubset<T, GodfatherFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Godfather>>, PrismaPromise<Array<GodfatherGetPayload<T>>>>

    /**
     * Create a Godfather.
     * @param {GodfatherCreateArgs} args - Arguments to create a Godfather.
     * @example
     * // Create one Godfather
     * const Godfather = await prisma.godfather.create({
     *   data: {
     *     // ... data to create a Godfather
     *   }
     * })
     * 
    **/
    create<T extends GodfatherCreateArgs>(
      args: SelectSubset<T, GodfatherCreateArgs>
    ): CheckSelect<T, Prisma__GodfatherClient<Godfather>, Prisma__GodfatherClient<GodfatherGetPayload<T>>>

    /**
     * Create many Godfathers.
     *     @param {GodfatherCreateManyArgs} args - Arguments to create many Godfathers.
     *     @example
     *     // Create many Godfathers
     *     const godfather = await prisma.godfather.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GodfatherCreateManyArgs>(
      args?: SelectSubset<T, GodfatherCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Godfather.
     * @param {GodfatherDeleteArgs} args - Arguments to delete one Godfather.
     * @example
     * // Delete one Godfather
     * const Godfather = await prisma.godfather.delete({
     *   where: {
     *     // ... filter to delete one Godfather
     *   }
     * })
     * 
    **/
    delete<T extends GodfatherDeleteArgs>(
      args: SelectSubset<T, GodfatherDeleteArgs>
    ): CheckSelect<T, Prisma__GodfatherClient<Godfather>, Prisma__GodfatherClient<GodfatherGetPayload<T>>>

    /**
     * Update one Godfather.
     * @param {GodfatherUpdateArgs} args - Arguments to update one Godfather.
     * @example
     * // Update one Godfather
     * const godfather = await prisma.godfather.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GodfatherUpdateArgs>(
      args: SelectSubset<T, GodfatherUpdateArgs>
    ): CheckSelect<T, Prisma__GodfatherClient<Godfather>, Prisma__GodfatherClient<GodfatherGetPayload<T>>>

    /**
     * Delete zero or more Godfathers.
     * @param {GodfatherDeleteManyArgs} args - Arguments to filter Godfathers to delete.
     * @example
     * // Delete a few Godfathers
     * const { count } = await prisma.godfather.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GodfatherDeleteManyArgs>(
      args?: SelectSubset<T, GodfatherDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Godfathers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GodfatherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Godfathers
     * const godfather = await prisma.godfather.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GodfatherUpdateManyArgs>(
      args: SelectSubset<T, GodfatherUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Godfather.
     * @param {GodfatherUpsertArgs} args - Arguments to update or create a Godfather.
     * @example
     * // Update or create a Godfather
     * const godfather = await prisma.godfather.upsert({
     *   create: {
     *     // ... data to create a Godfather
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Godfather we want to update
     *   }
     * })
    **/
    upsert<T extends GodfatherUpsertArgs>(
      args: SelectSubset<T, GodfatherUpsertArgs>
    ): CheckSelect<T, Prisma__GodfatherClient<Godfather>, Prisma__GodfatherClient<GodfatherGetPayload<T>>>

    /**
     * Find one Godfather that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GodfatherFindUniqueOrThrowArgs} args - Arguments to find a Godfather
     * @example
     * // Get one Godfather
     * const godfather = await prisma.godfather.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GodfatherFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GodfatherFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__GodfatherClient<Godfather>, Prisma__GodfatherClient<GodfatherGetPayload<T>>>

    /**
     * Find the first Godfather that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GodfatherFindFirstOrThrowArgs} args - Arguments to find a Godfather
     * @example
     * // Get one Godfather
     * const godfather = await prisma.godfather.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GodfatherFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GodfatherFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__GodfatherClient<Godfather>, Prisma__GodfatherClient<GodfatherGetPayload<T>>>

    /**
     * Count the number of Godfathers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GodfatherCountArgs} args - Arguments to filter Godfathers to count.
     * @example
     * // Count the number of Godfathers
     * const count = await prisma.godfather.count({
     *   where: {
     *     // ... the filter for the Godfathers we want to count
     *   }
     * })
    **/
    count<T extends GodfatherCountArgs>(
      args?: Subset<T, GodfatherCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GodfatherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Godfather.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GodfatherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GodfatherAggregateArgs>(args: Subset<T, GodfatherAggregateArgs>): PrismaPromise<GetGodfatherAggregateType<T>>

    /**
     * Group by Godfather.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GodfatherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GodfatherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GodfatherGroupByArgs['orderBy'] }
        : { orderBy?: GodfatherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GodfatherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGodfatherGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Godfather.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GodfatherClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Godfather base type for findUnique actions
   */
  export type GodfatherFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Godfather
     * 
    **/
    select?: GodfatherSelect | null
    /**
     * Filter, which Godfather to fetch.
     * 
    **/
    where: GodfatherWhereUniqueInput
  }

  /**
   * Godfather: findUnique
   */
  export interface GodfatherFindUniqueArgs extends GodfatherFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Godfather base type for findFirst actions
   */
  export type GodfatherFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Godfather
     * 
    **/
    select?: GodfatherSelect | null
    /**
     * Filter, which Godfather to fetch.
     * 
    **/
    where?: GodfatherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Godfathers to fetch.
     * 
    **/
    orderBy?: Enumerable<GodfatherOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Godfathers.
     * 
    **/
    cursor?: GodfatherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Godfathers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Godfathers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Godfathers.
     * 
    **/
    distinct?: Enumerable<GodfatherScalarFieldEnum>
  }

  /**
   * Godfather: findFirst
   */
  export interface GodfatherFindFirstArgs extends GodfatherFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Godfather findMany
   */
  export type GodfatherFindManyArgs = {
    /**
     * Select specific fields to fetch from the Godfather
     * 
    **/
    select?: GodfatherSelect | null
    /**
     * Filter, which Godfathers to fetch.
     * 
    **/
    where?: GodfatherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Godfathers to fetch.
     * 
    **/
    orderBy?: Enumerable<GodfatherOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Godfathers.
     * 
    **/
    cursor?: GodfatherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Godfathers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Godfathers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GodfatherScalarFieldEnum>
  }


  /**
   * Godfather create
   */
  export type GodfatherCreateArgs = {
    /**
     * Select specific fields to fetch from the Godfather
     * 
    **/
    select?: GodfatherSelect | null
    /**
     * The data needed to create a Godfather.
     * 
    **/
    data: XOR<GodfatherCreateInput, GodfatherUncheckedCreateInput>
  }


  /**
   * Godfather createMany
   */
  export type GodfatherCreateManyArgs = {
    /**
     * The data used to create many Godfathers.
     * 
    **/
    data: Enumerable<GodfatherCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Godfather update
   */
  export type GodfatherUpdateArgs = {
    /**
     * Select specific fields to fetch from the Godfather
     * 
    **/
    select?: GodfatherSelect | null
    /**
     * The data needed to update a Godfather.
     * 
    **/
    data: XOR<GodfatherUpdateInput, GodfatherUncheckedUpdateInput>
    /**
     * Choose, which Godfather to update.
     * 
    **/
    where: GodfatherWhereUniqueInput
  }


  /**
   * Godfather updateMany
   */
  export type GodfatherUpdateManyArgs = {
    /**
     * The data used to update Godfathers.
     * 
    **/
    data: XOR<GodfatherUpdateManyMutationInput, GodfatherUncheckedUpdateManyInput>
    /**
     * Filter which Godfathers to update
     * 
    **/
    where?: GodfatherWhereInput
  }


  /**
   * Godfather upsert
   */
  export type GodfatherUpsertArgs = {
    /**
     * Select specific fields to fetch from the Godfather
     * 
    **/
    select?: GodfatherSelect | null
    /**
     * The filter to search for the Godfather to update in case it exists.
     * 
    **/
    where: GodfatherWhereUniqueInput
    /**
     * In case the Godfather found by the `where` argument doesn't exist, create a new Godfather with this data.
     * 
    **/
    create: XOR<GodfatherCreateInput, GodfatherUncheckedCreateInput>
    /**
     * In case the Godfather was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GodfatherUpdateInput, GodfatherUncheckedUpdateInput>
  }


  /**
   * Godfather delete
   */
  export type GodfatherDeleteArgs = {
    /**
     * Select specific fields to fetch from the Godfather
     * 
    **/
    select?: GodfatherSelect | null
    /**
     * Filter which Godfather to delete.
     * 
    **/
    where: GodfatherWhereUniqueInput
  }


  /**
   * Godfather deleteMany
   */
  export type GodfatherDeleteManyArgs = {
    /**
     * Filter which Godfathers to delete
     * 
    **/
    where?: GodfatherWhereInput
  }


  /**
   * Godfather: findUniqueOrThrow
   */
  export type GodfatherFindUniqueOrThrowArgs = GodfatherFindUniqueArgsBase
      

  /**
   * Godfather: findFirstOrThrow
   */
  export type GodfatherFindFirstOrThrowArgs = GodfatherFindFirstArgsBase
      

  /**
   * Godfather without action
   */
  export type GodfatherArgs = {
    /**
     * Select specific fields to fetch from the Godfather
     * 
    **/
    select?: GodfatherSelect | null
  }



  /**
   * Model Proposal
   */


  export type AggregateProposal = {
    _count: ProposalCountAggregateOutputType | null
    _avg: ProposalAvgAggregateOutputType | null
    _sum: ProposalSumAggregateOutputType | null
    _min: ProposalMinAggregateOutputType | null
    _max: ProposalMaxAggregateOutputType | null
  }

  export type ProposalAvgAggregateOutputType = {
    id: number | null
    joke_id: number | null
    suggestion_id: number | null
  }

  export type ProposalSumAggregateOutputType = {
    id: number | null
    joke_id: number | null
    suggestion_id: number | null
  }

  export type ProposalMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    message_id: string | null
    type: ProposalType | null
    joke_id: number | null
    joke_type: string | null
    joke_question: string | null
    joke_answer: string | null
    merged: boolean | null
    refused: boolean | null
    stale: boolean | null
    created_at: Date | null
    suggestion_id: number | null
  }

  export type ProposalMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    message_id: string | null
    type: ProposalType | null
    joke_id: number | null
    joke_type: string | null
    joke_question: string | null
    joke_answer: string | null
    merged: boolean | null
    refused: boolean | null
    stale: boolean | null
    created_at: Date | null
    suggestion_id: number | null
  }

  export type ProposalCountAggregateOutputType = {
    id: number
    user_id: number
    message_id: number
    type: number
    joke_id: number
    joke_type: number
    joke_question: number
    joke_answer: number
    merged: number
    refused: number
    stale: number
    created_at: number
    suggestion_id: number
    _all: number
  }


  export type ProposalAvgAggregateInputType = {
    id?: true
    joke_id?: true
    suggestion_id?: true
  }

  export type ProposalSumAggregateInputType = {
    id?: true
    joke_id?: true
    suggestion_id?: true
  }

  export type ProposalMinAggregateInputType = {
    id?: true
    user_id?: true
    message_id?: true
    type?: true
    joke_id?: true
    joke_type?: true
    joke_question?: true
    joke_answer?: true
    merged?: true
    refused?: true
    stale?: true
    created_at?: true
    suggestion_id?: true
  }

  export type ProposalMaxAggregateInputType = {
    id?: true
    user_id?: true
    message_id?: true
    type?: true
    joke_id?: true
    joke_type?: true
    joke_question?: true
    joke_answer?: true
    merged?: true
    refused?: true
    stale?: true
    created_at?: true
    suggestion_id?: true
  }

  export type ProposalCountAggregateInputType = {
    id?: true
    user_id?: true
    message_id?: true
    type?: true
    joke_id?: true
    joke_type?: true
    joke_question?: true
    joke_answer?: true
    merged?: true
    refused?: true
    stale?: true
    created_at?: true
    suggestion_id?: true
    _all?: true
  }

  export type ProposalAggregateArgs = {
    /**
     * Filter which Proposal to aggregate.
     * 
    **/
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     * 
    **/
    orderBy?: Enumerable<ProposalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Proposals
    **/
    _count?: true | ProposalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProposalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProposalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProposalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProposalMaxAggregateInputType
  }

  export type GetProposalAggregateType<T extends ProposalAggregateArgs> = {
        [P in keyof T & keyof AggregateProposal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProposal[P]>
      : GetScalarType<T[P], AggregateProposal[P]>
  }




  export type ProposalGroupByArgs = {
    where?: ProposalWhereInput
    orderBy?: Enumerable<ProposalOrderByWithAggregationInput>
    by: Array<ProposalScalarFieldEnum>
    having?: ProposalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProposalCountAggregateInputType | true
    _avg?: ProposalAvgAggregateInputType
    _sum?: ProposalSumAggregateInputType
    _min?: ProposalMinAggregateInputType
    _max?: ProposalMaxAggregateInputType
  }


  export type ProposalGroupByOutputType = {
    id: number
    user_id: string | null
    message_id: string | null
    type: ProposalType
    joke_id: number | null
    joke_type: string | null
    joke_question: string | null
    joke_answer: string | null
    merged: boolean
    refused: boolean
    stale: boolean
    created_at: Date
    suggestion_id: number | null
    _count: ProposalCountAggregateOutputType | null
    _avg: ProposalAvgAggregateOutputType | null
    _sum: ProposalSumAggregateOutputType | null
    _min: ProposalMinAggregateOutputType | null
    _max: ProposalMaxAggregateOutputType | null
  }

  type GetProposalGroupByPayload<T extends ProposalGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProposalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProposalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProposalGroupByOutputType[P]>
            : GetScalarType<T[P], ProposalGroupByOutputType[P]>
        }
      >
    >


  export type ProposalSelect = {
    id?: boolean
    user_id?: boolean
    message_id?: boolean
    type?: boolean
    joke_id?: boolean
    joke_type?: boolean
    joke_question?: boolean
    joke_answer?: boolean
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: boolean
    approvals?: boolean | ApprovalFindManyArgs
    disapprovals?: boolean | DisapprovalFindManyArgs
    votes?: boolean | VoteFindManyArgs
    suggestion_id?: boolean
    suggestion?: boolean | ProposalArgs
    corrections?: boolean | ProposalFindManyArgs
    reports?: boolean | ReportFindManyArgs
    _count?: boolean | ProposalCountOutputTypeArgs
  }

  export type ProposalInclude = {
    approvals?: boolean | ApprovalFindManyArgs
    disapprovals?: boolean | DisapprovalFindManyArgs
    votes?: boolean | VoteFindManyArgs
    suggestion?: boolean | ProposalArgs
    corrections?: boolean | ProposalFindManyArgs
    reports?: boolean | ReportFindManyArgs
    _count?: boolean | ProposalCountOutputTypeArgs
  }

  export type ProposalGetPayload<
    S extends boolean | null | undefined | ProposalArgs,
    U = keyof S
      > = S extends true
        ? Proposal
    : S extends undefined
    ? never
    : S extends ProposalArgs | ProposalFindManyArgs
    ?'include' extends U
    ? Proposal  & {
    [P in TrueKeys<S['include']>]:
        P extends 'approvals' ? Array < ApprovalGetPayload<S['include'][P]>>  :
        P extends 'disapprovals' ? Array < DisapprovalGetPayload<S['include'][P]>>  :
        P extends 'votes' ? Array < VoteGetPayload<S['include'][P]>>  :
        P extends 'suggestion' ? ProposalGetPayload<S['include'][P]> | null :
        P extends 'corrections' ? Array < ProposalGetPayload<S['include'][P]>>  :
        P extends 'reports' ? Array < ReportGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProposalCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'approvals' ? Array < ApprovalGetPayload<S['select'][P]>>  :
        P extends 'disapprovals' ? Array < DisapprovalGetPayload<S['select'][P]>>  :
        P extends 'votes' ? Array < VoteGetPayload<S['select'][P]>>  :
        P extends 'suggestion' ? ProposalGetPayload<S['select'][P]> | null :
        P extends 'corrections' ? Array < ProposalGetPayload<S['select'][P]>>  :
        P extends 'reports' ? Array < ReportGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProposalCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Proposal ? Proposal[P] : never
  } 
    : Proposal
  : Proposal


  type ProposalCountArgs = Merge<
    Omit<ProposalFindManyArgs, 'select' | 'include'> & {
      select?: ProposalCountAggregateInputType | true
    }
  >

  export interface ProposalDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Proposal that matches the filter.
     * @param {ProposalFindUniqueArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProposalFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProposalFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Proposal'> extends True ? CheckSelect<T, Prisma__ProposalClient<Proposal>, Prisma__ProposalClient<ProposalGetPayload<T>>> : CheckSelect<T, Prisma__ProposalClient<Proposal | null >, Prisma__ProposalClient<ProposalGetPayload<T> | null >>

    /**
     * Find the first Proposal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindFirstArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProposalFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProposalFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Proposal'> extends True ? CheckSelect<T, Prisma__ProposalClient<Proposal>, Prisma__ProposalClient<ProposalGetPayload<T>>> : CheckSelect<T, Prisma__ProposalClient<Proposal | null >, Prisma__ProposalClient<ProposalGetPayload<T> | null >>

    /**
     * Find zero or more Proposals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Proposals
     * const proposals = await prisma.proposal.findMany()
     * 
     * // Get first 10 Proposals
     * const proposals = await prisma.proposal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proposalWithIdOnly = await prisma.proposal.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProposalFindManyArgs>(
      args?: SelectSubset<T, ProposalFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Proposal>>, PrismaPromise<Array<ProposalGetPayload<T>>>>

    /**
     * Create a Proposal.
     * @param {ProposalCreateArgs} args - Arguments to create a Proposal.
     * @example
     * // Create one Proposal
     * const Proposal = await prisma.proposal.create({
     *   data: {
     *     // ... data to create a Proposal
     *   }
     * })
     * 
    **/
    create<T extends ProposalCreateArgs>(
      args: SelectSubset<T, ProposalCreateArgs>
    ): CheckSelect<T, Prisma__ProposalClient<Proposal>, Prisma__ProposalClient<ProposalGetPayload<T>>>

    /**
     * Create many Proposals.
     *     @param {ProposalCreateManyArgs} args - Arguments to create many Proposals.
     *     @example
     *     // Create many Proposals
     *     const proposal = await prisma.proposal.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProposalCreateManyArgs>(
      args?: SelectSubset<T, ProposalCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Proposal.
     * @param {ProposalDeleteArgs} args - Arguments to delete one Proposal.
     * @example
     * // Delete one Proposal
     * const Proposal = await prisma.proposal.delete({
     *   where: {
     *     // ... filter to delete one Proposal
     *   }
     * })
     * 
    **/
    delete<T extends ProposalDeleteArgs>(
      args: SelectSubset<T, ProposalDeleteArgs>
    ): CheckSelect<T, Prisma__ProposalClient<Proposal>, Prisma__ProposalClient<ProposalGetPayload<T>>>

    /**
     * Update one Proposal.
     * @param {ProposalUpdateArgs} args - Arguments to update one Proposal.
     * @example
     * // Update one Proposal
     * const proposal = await prisma.proposal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProposalUpdateArgs>(
      args: SelectSubset<T, ProposalUpdateArgs>
    ): CheckSelect<T, Prisma__ProposalClient<Proposal>, Prisma__ProposalClient<ProposalGetPayload<T>>>

    /**
     * Delete zero or more Proposals.
     * @param {ProposalDeleteManyArgs} args - Arguments to filter Proposals to delete.
     * @example
     * // Delete a few Proposals
     * const { count } = await prisma.proposal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProposalDeleteManyArgs>(
      args?: SelectSubset<T, ProposalDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proposals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Proposals
     * const proposal = await prisma.proposal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProposalUpdateManyArgs>(
      args: SelectSubset<T, ProposalUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Proposal.
     * @param {ProposalUpsertArgs} args - Arguments to update or create a Proposal.
     * @example
     * // Update or create a Proposal
     * const proposal = await prisma.proposal.upsert({
     *   create: {
     *     // ... data to create a Proposal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Proposal we want to update
     *   }
     * })
    **/
    upsert<T extends ProposalUpsertArgs>(
      args: SelectSubset<T, ProposalUpsertArgs>
    ): CheckSelect<T, Prisma__ProposalClient<Proposal>, Prisma__ProposalClient<ProposalGetPayload<T>>>

    /**
     * Find one Proposal that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ProposalFindUniqueOrThrowArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProposalFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProposalFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ProposalClient<Proposal>, Prisma__ProposalClient<ProposalGetPayload<T>>>

    /**
     * Find the first Proposal that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindFirstOrThrowArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProposalFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProposalFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ProposalClient<Proposal>, Prisma__ProposalClient<ProposalGetPayload<T>>>

    /**
     * Count the number of Proposals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalCountArgs} args - Arguments to filter Proposals to count.
     * @example
     * // Count the number of Proposals
     * const count = await prisma.proposal.count({
     *   where: {
     *     // ... the filter for the Proposals we want to count
     *   }
     * })
    **/
    count<T extends ProposalCountArgs>(
      args?: Subset<T, ProposalCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProposalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Proposal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProposalAggregateArgs>(args: Subset<T, ProposalAggregateArgs>): PrismaPromise<GetProposalAggregateType<T>>

    /**
     * Group by Proposal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProposalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProposalGroupByArgs['orderBy'] }
        : { orderBy?: ProposalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProposalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProposalGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Proposal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProposalClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    approvals<T extends ApprovalFindManyArgs = {}>(args?: Subset<T, ApprovalFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Approval>>, PrismaPromise<Array<ApprovalGetPayload<T>>>>;

    disapprovals<T extends DisapprovalFindManyArgs = {}>(args?: Subset<T, DisapprovalFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Disapproval>>, PrismaPromise<Array<DisapprovalGetPayload<T>>>>;

    votes<T extends VoteFindManyArgs = {}>(args?: Subset<T, VoteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Vote>>, PrismaPromise<Array<VoteGetPayload<T>>>>;

    suggestion<T extends ProposalArgs = {}>(args?: Subset<T, ProposalArgs>): CheckSelect<T, Prisma__ProposalClient<Proposal | null >, Prisma__ProposalClient<ProposalGetPayload<T> | null >>;

    corrections<T extends ProposalFindManyArgs = {}>(args?: Subset<T, ProposalFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Proposal>>, PrismaPromise<Array<ProposalGetPayload<T>>>>;

    reports<T extends ReportFindManyArgs = {}>(args?: Subset<T, ReportFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Report>>, PrismaPromise<Array<ReportGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Proposal base type for findUnique actions
   */
  export type ProposalFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Proposal
     * 
    **/
    select?: ProposalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProposalInclude | null
    /**
     * Filter, which Proposal to fetch.
     * 
    **/
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal: findUnique
   */
  export interface ProposalFindUniqueArgs extends ProposalFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Proposal base type for findFirst actions
   */
  export type ProposalFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Proposal
     * 
    **/
    select?: ProposalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProposalInclude | null
    /**
     * Filter, which Proposal to fetch.
     * 
    **/
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     * 
    **/
    orderBy?: Enumerable<ProposalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proposals.
     * 
    **/
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proposals.
     * 
    **/
    distinct?: Enumerable<ProposalScalarFieldEnum>
  }

  /**
   * Proposal: findFirst
   */
  export interface ProposalFindFirstArgs extends ProposalFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Proposal findMany
   */
  export type ProposalFindManyArgs = {
    /**
     * Select specific fields to fetch from the Proposal
     * 
    **/
    select?: ProposalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProposalInclude | null
    /**
     * Filter, which Proposals to fetch.
     * 
    **/
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     * 
    **/
    orderBy?: Enumerable<ProposalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Proposals.
     * 
    **/
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProposalScalarFieldEnum>
  }


  /**
   * Proposal create
   */
  export type ProposalCreateArgs = {
    /**
     * Select specific fields to fetch from the Proposal
     * 
    **/
    select?: ProposalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProposalInclude | null
    /**
     * The data needed to create a Proposal.
     * 
    **/
    data: XOR<ProposalCreateInput, ProposalUncheckedCreateInput>
  }


  /**
   * Proposal createMany
   */
  export type ProposalCreateManyArgs = {
    /**
     * The data used to create many Proposals.
     * 
    **/
    data: Enumerable<ProposalCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Proposal update
   */
  export type ProposalUpdateArgs = {
    /**
     * Select specific fields to fetch from the Proposal
     * 
    **/
    select?: ProposalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProposalInclude | null
    /**
     * The data needed to update a Proposal.
     * 
    **/
    data: XOR<ProposalUpdateInput, ProposalUncheckedUpdateInput>
    /**
     * Choose, which Proposal to update.
     * 
    **/
    where: ProposalWhereUniqueInput
  }


  /**
   * Proposal updateMany
   */
  export type ProposalUpdateManyArgs = {
    /**
     * The data used to update Proposals.
     * 
    **/
    data: XOR<ProposalUpdateManyMutationInput, ProposalUncheckedUpdateManyInput>
    /**
     * Filter which Proposals to update
     * 
    **/
    where?: ProposalWhereInput
  }


  /**
   * Proposal upsert
   */
  export type ProposalUpsertArgs = {
    /**
     * Select specific fields to fetch from the Proposal
     * 
    **/
    select?: ProposalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProposalInclude | null
    /**
     * The filter to search for the Proposal to update in case it exists.
     * 
    **/
    where: ProposalWhereUniqueInput
    /**
     * In case the Proposal found by the `where` argument doesn't exist, create a new Proposal with this data.
     * 
    **/
    create: XOR<ProposalCreateInput, ProposalUncheckedCreateInput>
    /**
     * In case the Proposal was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProposalUpdateInput, ProposalUncheckedUpdateInput>
  }


  /**
   * Proposal delete
   */
  export type ProposalDeleteArgs = {
    /**
     * Select specific fields to fetch from the Proposal
     * 
    **/
    select?: ProposalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProposalInclude | null
    /**
     * Filter which Proposal to delete.
     * 
    **/
    where: ProposalWhereUniqueInput
  }


  /**
   * Proposal deleteMany
   */
  export type ProposalDeleteManyArgs = {
    /**
     * Filter which Proposals to delete
     * 
    **/
    where?: ProposalWhereInput
  }


  /**
   * Proposal: findUniqueOrThrow
   */
  export type ProposalFindUniqueOrThrowArgs = ProposalFindUniqueArgsBase
      

  /**
   * Proposal: findFirstOrThrow
   */
  export type ProposalFindFirstOrThrowArgs = ProposalFindFirstArgsBase
      

  /**
   * Proposal without action
   */
  export type ProposalArgs = {
    /**
     * Select specific fields to fetch from the Proposal
     * 
    **/
    select?: ProposalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProposalInclude | null
  }



  /**
   * Model Approval
   */


  export type AggregateApproval = {
    _count: ApprovalCountAggregateOutputType | null
    _avg: ApprovalAvgAggregateOutputType | null
    _sum: ApprovalSumAggregateOutputType | null
    _min: ApprovalMinAggregateOutputType | null
    _max: ApprovalMaxAggregateOutputType | null
  }

  export type ApprovalAvgAggregateOutputType = {
    proposal_id: number | null
  }

  export type ApprovalSumAggregateOutputType = {
    proposal_id: number | null
  }

  export type ApprovalMinAggregateOutputType = {
    proposal_id: number | null
    user_id: string | null
  }

  export type ApprovalMaxAggregateOutputType = {
    proposal_id: number | null
    user_id: string | null
  }

  export type ApprovalCountAggregateOutputType = {
    proposal_id: number
    user_id: number
    _all: number
  }


  export type ApprovalAvgAggregateInputType = {
    proposal_id?: true
  }

  export type ApprovalSumAggregateInputType = {
    proposal_id?: true
  }

  export type ApprovalMinAggregateInputType = {
    proposal_id?: true
    user_id?: true
  }

  export type ApprovalMaxAggregateInputType = {
    proposal_id?: true
    user_id?: true
  }

  export type ApprovalCountAggregateInputType = {
    proposal_id?: true
    user_id?: true
    _all?: true
  }

  export type ApprovalAggregateArgs = {
    /**
     * Filter which Approval to aggregate.
     * 
    **/
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     * 
    **/
    orderBy?: Enumerable<ApprovalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Approvals
    **/
    _count?: true | ApprovalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApprovalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApprovalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApprovalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApprovalMaxAggregateInputType
  }

  export type GetApprovalAggregateType<T extends ApprovalAggregateArgs> = {
        [P in keyof T & keyof AggregateApproval]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApproval[P]>
      : GetScalarType<T[P], AggregateApproval[P]>
  }




  export type ApprovalGroupByArgs = {
    where?: ApprovalWhereInput
    orderBy?: Enumerable<ApprovalOrderByWithAggregationInput>
    by: Array<ApprovalScalarFieldEnum>
    having?: ApprovalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApprovalCountAggregateInputType | true
    _avg?: ApprovalAvgAggregateInputType
    _sum?: ApprovalSumAggregateInputType
    _min?: ApprovalMinAggregateInputType
    _max?: ApprovalMaxAggregateInputType
  }


  export type ApprovalGroupByOutputType = {
    proposal_id: number
    user_id: string
    _count: ApprovalCountAggregateOutputType | null
    _avg: ApprovalAvgAggregateOutputType | null
    _sum: ApprovalSumAggregateOutputType | null
    _min: ApprovalMinAggregateOutputType | null
    _max: ApprovalMaxAggregateOutputType | null
  }

  type GetApprovalGroupByPayload<T extends ApprovalGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ApprovalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApprovalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApprovalGroupByOutputType[P]>
            : GetScalarType<T[P], ApprovalGroupByOutputType[P]>
        }
      >
    >


  export type ApprovalSelect = {
    proposal_id?: boolean
    user_id?: boolean
    proposal?: boolean | ProposalArgs
  }

  export type ApprovalInclude = {
    proposal?: boolean | ProposalArgs
  }

  export type ApprovalGetPayload<
    S extends boolean | null | undefined | ApprovalArgs,
    U = keyof S
      > = S extends true
        ? Approval
    : S extends undefined
    ? never
    : S extends ApprovalArgs | ApprovalFindManyArgs
    ?'include' extends U
    ? Approval  & {
    [P in TrueKeys<S['include']>]:
        P extends 'proposal' ? ProposalGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'proposal' ? ProposalGetPayload<S['select'][P]> :  P extends keyof Approval ? Approval[P] : never
  } 
    : Approval
  : Approval


  type ApprovalCountArgs = Merge<
    Omit<ApprovalFindManyArgs, 'select' | 'include'> & {
      select?: ApprovalCountAggregateInputType | true
    }
  >

  export interface ApprovalDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Approval that matches the filter.
     * @param {ApprovalFindUniqueArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApprovalFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ApprovalFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Approval'> extends True ? CheckSelect<T, Prisma__ApprovalClient<Approval>, Prisma__ApprovalClient<ApprovalGetPayload<T>>> : CheckSelect<T, Prisma__ApprovalClient<Approval | null >, Prisma__ApprovalClient<ApprovalGetPayload<T> | null >>

    /**
     * Find the first Approval that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindFirstArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApprovalFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ApprovalFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Approval'> extends True ? CheckSelect<T, Prisma__ApprovalClient<Approval>, Prisma__ApprovalClient<ApprovalGetPayload<T>>> : CheckSelect<T, Prisma__ApprovalClient<Approval | null >, Prisma__ApprovalClient<ApprovalGetPayload<T> | null >>

    /**
     * Find zero or more Approvals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Approvals
     * const approvals = await prisma.approval.findMany()
     * 
     * // Get first 10 Approvals
     * const approvals = await prisma.approval.findMany({ take: 10 })
     * 
     * // Only select the `proposal_id`
     * const approvalWithProposal_idOnly = await prisma.approval.findMany({ select: { proposal_id: true } })
     * 
    **/
    findMany<T extends ApprovalFindManyArgs>(
      args?: SelectSubset<T, ApprovalFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Approval>>, PrismaPromise<Array<ApprovalGetPayload<T>>>>

    /**
     * Create a Approval.
     * @param {ApprovalCreateArgs} args - Arguments to create a Approval.
     * @example
     * // Create one Approval
     * const Approval = await prisma.approval.create({
     *   data: {
     *     // ... data to create a Approval
     *   }
     * })
     * 
    **/
    create<T extends ApprovalCreateArgs>(
      args: SelectSubset<T, ApprovalCreateArgs>
    ): CheckSelect<T, Prisma__ApprovalClient<Approval>, Prisma__ApprovalClient<ApprovalGetPayload<T>>>

    /**
     * Create many Approvals.
     *     @param {ApprovalCreateManyArgs} args - Arguments to create many Approvals.
     *     @example
     *     // Create many Approvals
     *     const approval = await prisma.approval.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApprovalCreateManyArgs>(
      args?: SelectSubset<T, ApprovalCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Approval.
     * @param {ApprovalDeleteArgs} args - Arguments to delete one Approval.
     * @example
     * // Delete one Approval
     * const Approval = await prisma.approval.delete({
     *   where: {
     *     // ... filter to delete one Approval
     *   }
     * })
     * 
    **/
    delete<T extends ApprovalDeleteArgs>(
      args: SelectSubset<T, ApprovalDeleteArgs>
    ): CheckSelect<T, Prisma__ApprovalClient<Approval>, Prisma__ApprovalClient<ApprovalGetPayload<T>>>

    /**
     * Update one Approval.
     * @param {ApprovalUpdateArgs} args - Arguments to update one Approval.
     * @example
     * // Update one Approval
     * const approval = await prisma.approval.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApprovalUpdateArgs>(
      args: SelectSubset<T, ApprovalUpdateArgs>
    ): CheckSelect<T, Prisma__ApprovalClient<Approval>, Prisma__ApprovalClient<ApprovalGetPayload<T>>>

    /**
     * Delete zero or more Approvals.
     * @param {ApprovalDeleteManyArgs} args - Arguments to filter Approvals to delete.
     * @example
     * // Delete a few Approvals
     * const { count } = await prisma.approval.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApprovalDeleteManyArgs>(
      args?: SelectSubset<T, ApprovalDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Approvals
     * const approval = await prisma.approval.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApprovalUpdateManyArgs>(
      args: SelectSubset<T, ApprovalUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Approval.
     * @param {ApprovalUpsertArgs} args - Arguments to update or create a Approval.
     * @example
     * // Update or create a Approval
     * const approval = await prisma.approval.upsert({
     *   create: {
     *     // ... data to create a Approval
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Approval we want to update
     *   }
     * })
    **/
    upsert<T extends ApprovalUpsertArgs>(
      args: SelectSubset<T, ApprovalUpsertArgs>
    ): CheckSelect<T, Prisma__ApprovalClient<Approval>, Prisma__ApprovalClient<ApprovalGetPayload<T>>>

    /**
     * Find one Approval that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ApprovalFindUniqueOrThrowArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ApprovalFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ApprovalFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ApprovalClient<Approval>, Prisma__ApprovalClient<ApprovalGetPayload<T>>>

    /**
     * Find the first Approval that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindFirstOrThrowArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ApprovalFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ApprovalFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ApprovalClient<Approval>, Prisma__ApprovalClient<ApprovalGetPayload<T>>>

    /**
     * Count the number of Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalCountArgs} args - Arguments to filter Approvals to count.
     * @example
     * // Count the number of Approvals
     * const count = await prisma.approval.count({
     *   where: {
     *     // ... the filter for the Approvals we want to count
     *   }
     * })
    **/
    count<T extends ApprovalCountArgs>(
      args?: Subset<T, ApprovalCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApprovalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Approval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApprovalAggregateArgs>(args: Subset<T, ApprovalAggregateArgs>): PrismaPromise<GetApprovalAggregateType<T>>

    /**
     * Group by Approval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApprovalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApprovalGroupByArgs['orderBy'] }
        : { orderBy?: ApprovalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApprovalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApprovalGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Approval.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ApprovalClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    proposal<T extends ProposalArgs = {}>(args?: Subset<T, ProposalArgs>): CheckSelect<T, Prisma__ProposalClient<Proposal | null >, Prisma__ProposalClient<ProposalGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Approval base type for findUnique actions
   */
  export type ApprovalFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Approval
     * 
    **/
    select?: ApprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApprovalInclude | null
    /**
     * Filter, which Approval to fetch.
     * 
    **/
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval: findUnique
   */
  export interface ApprovalFindUniqueArgs extends ApprovalFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Approval base type for findFirst actions
   */
  export type ApprovalFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Approval
     * 
    **/
    select?: ApprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApprovalInclude | null
    /**
     * Filter, which Approval to fetch.
     * 
    **/
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     * 
    **/
    orderBy?: Enumerable<ApprovalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Approvals.
     * 
    **/
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Approvals.
     * 
    **/
    distinct?: Enumerable<ApprovalScalarFieldEnum>
  }

  /**
   * Approval: findFirst
   */
  export interface ApprovalFindFirstArgs extends ApprovalFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Approval findMany
   */
  export type ApprovalFindManyArgs = {
    /**
     * Select specific fields to fetch from the Approval
     * 
    **/
    select?: ApprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApprovalInclude | null
    /**
     * Filter, which Approvals to fetch.
     * 
    **/
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     * 
    **/
    orderBy?: Enumerable<ApprovalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Approvals.
     * 
    **/
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ApprovalScalarFieldEnum>
  }


  /**
   * Approval create
   */
  export type ApprovalCreateArgs = {
    /**
     * Select specific fields to fetch from the Approval
     * 
    **/
    select?: ApprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApprovalInclude | null
    /**
     * The data needed to create a Approval.
     * 
    **/
    data: XOR<ApprovalCreateInput, ApprovalUncheckedCreateInput>
  }


  /**
   * Approval createMany
   */
  export type ApprovalCreateManyArgs = {
    /**
     * The data used to create many Approvals.
     * 
    **/
    data: Enumerable<ApprovalCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Approval update
   */
  export type ApprovalUpdateArgs = {
    /**
     * Select specific fields to fetch from the Approval
     * 
    **/
    select?: ApprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApprovalInclude | null
    /**
     * The data needed to update a Approval.
     * 
    **/
    data: XOR<ApprovalUpdateInput, ApprovalUncheckedUpdateInput>
    /**
     * Choose, which Approval to update.
     * 
    **/
    where: ApprovalWhereUniqueInput
  }


  /**
   * Approval updateMany
   */
  export type ApprovalUpdateManyArgs = {
    /**
     * The data used to update Approvals.
     * 
    **/
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyInput>
    /**
     * Filter which Approvals to update
     * 
    **/
    where?: ApprovalWhereInput
  }


  /**
   * Approval upsert
   */
  export type ApprovalUpsertArgs = {
    /**
     * Select specific fields to fetch from the Approval
     * 
    **/
    select?: ApprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApprovalInclude | null
    /**
     * The filter to search for the Approval to update in case it exists.
     * 
    **/
    where: ApprovalWhereUniqueInput
    /**
     * In case the Approval found by the `where` argument doesn't exist, create a new Approval with this data.
     * 
    **/
    create: XOR<ApprovalCreateInput, ApprovalUncheckedCreateInput>
    /**
     * In case the Approval was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ApprovalUpdateInput, ApprovalUncheckedUpdateInput>
  }


  /**
   * Approval delete
   */
  export type ApprovalDeleteArgs = {
    /**
     * Select specific fields to fetch from the Approval
     * 
    **/
    select?: ApprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApprovalInclude | null
    /**
     * Filter which Approval to delete.
     * 
    **/
    where: ApprovalWhereUniqueInput
  }


  /**
   * Approval deleteMany
   */
  export type ApprovalDeleteManyArgs = {
    /**
     * Filter which Approvals to delete
     * 
    **/
    where?: ApprovalWhereInput
  }


  /**
   * Approval: findUniqueOrThrow
   */
  export type ApprovalFindUniqueOrThrowArgs = ApprovalFindUniqueArgsBase
      

  /**
   * Approval: findFirstOrThrow
   */
  export type ApprovalFindFirstOrThrowArgs = ApprovalFindFirstArgsBase
      

  /**
   * Approval without action
   */
  export type ApprovalArgs = {
    /**
     * Select specific fields to fetch from the Approval
     * 
    **/
    select?: ApprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApprovalInclude | null
  }



  /**
   * Model Disapproval
   */


  export type AggregateDisapproval = {
    _count: DisapprovalCountAggregateOutputType | null
    _avg: DisapprovalAvgAggregateOutputType | null
    _sum: DisapprovalSumAggregateOutputType | null
    _min: DisapprovalMinAggregateOutputType | null
    _max: DisapprovalMaxAggregateOutputType | null
  }

  export type DisapprovalAvgAggregateOutputType = {
    proposal_id: number | null
  }

  export type DisapprovalSumAggregateOutputType = {
    proposal_id: number | null
  }

  export type DisapprovalMinAggregateOutputType = {
    proposal_id: number | null
    user_id: string | null
  }

  export type DisapprovalMaxAggregateOutputType = {
    proposal_id: number | null
    user_id: string | null
  }

  export type DisapprovalCountAggregateOutputType = {
    proposal_id: number
    user_id: number
    _all: number
  }


  export type DisapprovalAvgAggregateInputType = {
    proposal_id?: true
  }

  export type DisapprovalSumAggregateInputType = {
    proposal_id?: true
  }

  export type DisapprovalMinAggregateInputType = {
    proposal_id?: true
    user_id?: true
  }

  export type DisapprovalMaxAggregateInputType = {
    proposal_id?: true
    user_id?: true
  }

  export type DisapprovalCountAggregateInputType = {
    proposal_id?: true
    user_id?: true
    _all?: true
  }

  export type DisapprovalAggregateArgs = {
    /**
     * Filter which Disapproval to aggregate.
     * 
    **/
    where?: DisapprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disapprovals to fetch.
     * 
    **/
    orderBy?: Enumerable<DisapprovalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DisapprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disapprovals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disapprovals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Disapprovals
    **/
    _count?: true | DisapprovalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DisapprovalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DisapprovalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisapprovalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisapprovalMaxAggregateInputType
  }

  export type GetDisapprovalAggregateType<T extends DisapprovalAggregateArgs> = {
        [P in keyof T & keyof AggregateDisapproval]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDisapproval[P]>
      : GetScalarType<T[P], AggregateDisapproval[P]>
  }




  export type DisapprovalGroupByArgs = {
    where?: DisapprovalWhereInput
    orderBy?: Enumerable<DisapprovalOrderByWithAggregationInput>
    by: Array<DisapprovalScalarFieldEnum>
    having?: DisapprovalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisapprovalCountAggregateInputType | true
    _avg?: DisapprovalAvgAggregateInputType
    _sum?: DisapprovalSumAggregateInputType
    _min?: DisapprovalMinAggregateInputType
    _max?: DisapprovalMaxAggregateInputType
  }


  export type DisapprovalGroupByOutputType = {
    proposal_id: number
    user_id: string
    _count: DisapprovalCountAggregateOutputType | null
    _avg: DisapprovalAvgAggregateOutputType | null
    _sum: DisapprovalSumAggregateOutputType | null
    _min: DisapprovalMinAggregateOutputType | null
    _max: DisapprovalMaxAggregateOutputType | null
  }

  type GetDisapprovalGroupByPayload<T extends DisapprovalGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DisapprovalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisapprovalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisapprovalGroupByOutputType[P]>
            : GetScalarType<T[P], DisapprovalGroupByOutputType[P]>
        }
      >
    >


  export type DisapprovalSelect = {
    proposal_id?: boolean
    user_id?: boolean
    proposal?: boolean | ProposalArgs
  }

  export type DisapprovalInclude = {
    proposal?: boolean | ProposalArgs
  }

  export type DisapprovalGetPayload<
    S extends boolean | null | undefined | DisapprovalArgs,
    U = keyof S
      > = S extends true
        ? Disapproval
    : S extends undefined
    ? never
    : S extends DisapprovalArgs | DisapprovalFindManyArgs
    ?'include' extends U
    ? Disapproval  & {
    [P in TrueKeys<S['include']>]:
        P extends 'proposal' ? ProposalGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'proposal' ? ProposalGetPayload<S['select'][P]> :  P extends keyof Disapproval ? Disapproval[P] : never
  } 
    : Disapproval
  : Disapproval


  type DisapprovalCountArgs = Merge<
    Omit<DisapprovalFindManyArgs, 'select' | 'include'> & {
      select?: DisapprovalCountAggregateInputType | true
    }
  >

  export interface DisapprovalDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Disapproval that matches the filter.
     * @param {DisapprovalFindUniqueArgs} args - Arguments to find a Disapproval
     * @example
     * // Get one Disapproval
     * const disapproval = await prisma.disapproval.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DisapprovalFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DisapprovalFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Disapproval'> extends True ? CheckSelect<T, Prisma__DisapprovalClient<Disapproval>, Prisma__DisapprovalClient<DisapprovalGetPayload<T>>> : CheckSelect<T, Prisma__DisapprovalClient<Disapproval | null >, Prisma__DisapprovalClient<DisapprovalGetPayload<T> | null >>

    /**
     * Find the first Disapproval that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisapprovalFindFirstArgs} args - Arguments to find a Disapproval
     * @example
     * // Get one Disapproval
     * const disapproval = await prisma.disapproval.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DisapprovalFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DisapprovalFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Disapproval'> extends True ? CheckSelect<T, Prisma__DisapprovalClient<Disapproval>, Prisma__DisapprovalClient<DisapprovalGetPayload<T>>> : CheckSelect<T, Prisma__DisapprovalClient<Disapproval | null >, Prisma__DisapprovalClient<DisapprovalGetPayload<T> | null >>

    /**
     * Find zero or more Disapprovals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisapprovalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Disapprovals
     * const disapprovals = await prisma.disapproval.findMany()
     * 
     * // Get first 10 Disapprovals
     * const disapprovals = await prisma.disapproval.findMany({ take: 10 })
     * 
     * // Only select the `proposal_id`
     * const disapprovalWithProposal_idOnly = await prisma.disapproval.findMany({ select: { proposal_id: true } })
     * 
    **/
    findMany<T extends DisapprovalFindManyArgs>(
      args?: SelectSubset<T, DisapprovalFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Disapproval>>, PrismaPromise<Array<DisapprovalGetPayload<T>>>>

    /**
     * Create a Disapproval.
     * @param {DisapprovalCreateArgs} args - Arguments to create a Disapproval.
     * @example
     * // Create one Disapproval
     * const Disapproval = await prisma.disapproval.create({
     *   data: {
     *     // ... data to create a Disapproval
     *   }
     * })
     * 
    **/
    create<T extends DisapprovalCreateArgs>(
      args: SelectSubset<T, DisapprovalCreateArgs>
    ): CheckSelect<T, Prisma__DisapprovalClient<Disapproval>, Prisma__DisapprovalClient<DisapprovalGetPayload<T>>>

    /**
     * Create many Disapprovals.
     *     @param {DisapprovalCreateManyArgs} args - Arguments to create many Disapprovals.
     *     @example
     *     // Create many Disapprovals
     *     const disapproval = await prisma.disapproval.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DisapprovalCreateManyArgs>(
      args?: SelectSubset<T, DisapprovalCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Disapproval.
     * @param {DisapprovalDeleteArgs} args - Arguments to delete one Disapproval.
     * @example
     * // Delete one Disapproval
     * const Disapproval = await prisma.disapproval.delete({
     *   where: {
     *     // ... filter to delete one Disapproval
     *   }
     * })
     * 
    **/
    delete<T extends DisapprovalDeleteArgs>(
      args: SelectSubset<T, DisapprovalDeleteArgs>
    ): CheckSelect<T, Prisma__DisapprovalClient<Disapproval>, Prisma__DisapprovalClient<DisapprovalGetPayload<T>>>

    /**
     * Update one Disapproval.
     * @param {DisapprovalUpdateArgs} args - Arguments to update one Disapproval.
     * @example
     * // Update one Disapproval
     * const disapproval = await prisma.disapproval.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DisapprovalUpdateArgs>(
      args: SelectSubset<T, DisapprovalUpdateArgs>
    ): CheckSelect<T, Prisma__DisapprovalClient<Disapproval>, Prisma__DisapprovalClient<DisapprovalGetPayload<T>>>

    /**
     * Delete zero or more Disapprovals.
     * @param {DisapprovalDeleteManyArgs} args - Arguments to filter Disapprovals to delete.
     * @example
     * // Delete a few Disapprovals
     * const { count } = await prisma.disapproval.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DisapprovalDeleteManyArgs>(
      args?: SelectSubset<T, DisapprovalDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disapprovals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisapprovalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Disapprovals
     * const disapproval = await prisma.disapproval.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DisapprovalUpdateManyArgs>(
      args: SelectSubset<T, DisapprovalUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Disapproval.
     * @param {DisapprovalUpsertArgs} args - Arguments to update or create a Disapproval.
     * @example
     * // Update or create a Disapproval
     * const disapproval = await prisma.disapproval.upsert({
     *   create: {
     *     // ... data to create a Disapproval
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Disapproval we want to update
     *   }
     * })
    **/
    upsert<T extends DisapprovalUpsertArgs>(
      args: SelectSubset<T, DisapprovalUpsertArgs>
    ): CheckSelect<T, Prisma__DisapprovalClient<Disapproval>, Prisma__DisapprovalClient<DisapprovalGetPayload<T>>>

    /**
     * Find one Disapproval that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {DisapprovalFindUniqueOrThrowArgs} args - Arguments to find a Disapproval
     * @example
     * // Get one Disapproval
     * const disapproval = await prisma.disapproval.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DisapprovalFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DisapprovalFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__DisapprovalClient<Disapproval>, Prisma__DisapprovalClient<DisapprovalGetPayload<T>>>

    /**
     * Find the first Disapproval that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisapprovalFindFirstOrThrowArgs} args - Arguments to find a Disapproval
     * @example
     * // Get one Disapproval
     * const disapproval = await prisma.disapproval.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DisapprovalFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DisapprovalFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__DisapprovalClient<Disapproval>, Prisma__DisapprovalClient<DisapprovalGetPayload<T>>>

    /**
     * Count the number of Disapprovals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisapprovalCountArgs} args - Arguments to filter Disapprovals to count.
     * @example
     * // Count the number of Disapprovals
     * const count = await prisma.disapproval.count({
     *   where: {
     *     // ... the filter for the Disapprovals we want to count
     *   }
     * })
    **/
    count<T extends DisapprovalCountArgs>(
      args?: Subset<T, DisapprovalCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisapprovalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Disapproval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisapprovalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisapprovalAggregateArgs>(args: Subset<T, DisapprovalAggregateArgs>): PrismaPromise<GetDisapprovalAggregateType<T>>

    /**
     * Group by Disapproval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisapprovalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisapprovalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisapprovalGroupByArgs['orderBy'] }
        : { orderBy?: DisapprovalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisapprovalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisapprovalGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Disapproval.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DisapprovalClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    proposal<T extends ProposalArgs = {}>(args?: Subset<T, ProposalArgs>): CheckSelect<T, Prisma__ProposalClient<Proposal | null >, Prisma__ProposalClient<ProposalGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Disapproval base type for findUnique actions
   */
  export type DisapprovalFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Disapproval
     * 
    **/
    select?: DisapprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisapprovalInclude | null
    /**
     * Filter, which Disapproval to fetch.
     * 
    **/
    where: DisapprovalWhereUniqueInput
  }

  /**
   * Disapproval: findUnique
   */
  export interface DisapprovalFindUniqueArgs extends DisapprovalFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Disapproval base type for findFirst actions
   */
  export type DisapprovalFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Disapproval
     * 
    **/
    select?: DisapprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisapprovalInclude | null
    /**
     * Filter, which Disapproval to fetch.
     * 
    **/
    where?: DisapprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disapprovals to fetch.
     * 
    **/
    orderBy?: Enumerable<DisapprovalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disapprovals.
     * 
    **/
    cursor?: DisapprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disapprovals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disapprovals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disapprovals.
     * 
    **/
    distinct?: Enumerable<DisapprovalScalarFieldEnum>
  }

  /**
   * Disapproval: findFirst
   */
  export interface DisapprovalFindFirstArgs extends DisapprovalFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Disapproval findMany
   */
  export type DisapprovalFindManyArgs = {
    /**
     * Select specific fields to fetch from the Disapproval
     * 
    **/
    select?: DisapprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisapprovalInclude | null
    /**
     * Filter, which Disapprovals to fetch.
     * 
    **/
    where?: DisapprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disapprovals to fetch.
     * 
    **/
    orderBy?: Enumerable<DisapprovalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Disapprovals.
     * 
    **/
    cursor?: DisapprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disapprovals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disapprovals.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DisapprovalScalarFieldEnum>
  }


  /**
   * Disapproval create
   */
  export type DisapprovalCreateArgs = {
    /**
     * Select specific fields to fetch from the Disapproval
     * 
    **/
    select?: DisapprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisapprovalInclude | null
    /**
     * The data needed to create a Disapproval.
     * 
    **/
    data: XOR<DisapprovalCreateInput, DisapprovalUncheckedCreateInput>
  }


  /**
   * Disapproval createMany
   */
  export type DisapprovalCreateManyArgs = {
    /**
     * The data used to create many Disapprovals.
     * 
    **/
    data: Enumerable<DisapprovalCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Disapproval update
   */
  export type DisapprovalUpdateArgs = {
    /**
     * Select specific fields to fetch from the Disapproval
     * 
    **/
    select?: DisapprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisapprovalInclude | null
    /**
     * The data needed to update a Disapproval.
     * 
    **/
    data: XOR<DisapprovalUpdateInput, DisapprovalUncheckedUpdateInput>
    /**
     * Choose, which Disapproval to update.
     * 
    **/
    where: DisapprovalWhereUniqueInput
  }


  /**
   * Disapproval updateMany
   */
  export type DisapprovalUpdateManyArgs = {
    /**
     * The data used to update Disapprovals.
     * 
    **/
    data: XOR<DisapprovalUpdateManyMutationInput, DisapprovalUncheckedUpdateManyInput>
    /**
     * Filter which Disapprovals to update
     * 
    **/
    where?: DisapprovalWhereInput
  }


  /**
   * Disapproval upsert
   */
  export type DisapprovalUpsertArgs = {
    /**
     * Select specific fields to fetch from the Disapproval
     * 
    **/
    select?: DisapprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisapprovalInclude | null
    /**
     * The filter to search for the Disapproval to update in case it exists.
     * 
    **/
    where: DisapprovalWhereUniqueInput
    /**
     * In case the Disapproval found by the `where` argument doesn't exist, create a new Disapproval with this data.
     * 
    **/
    create: XOR<DisapprovalCreateInput, DisapprovalUncheckedCreateInput>
    /**
     * In case the Disapproval was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DisapprovalUpdateInput, DisapprovalUncheckedUpdateInput>
  }


  /**
   * Disapproval delete
   */
  export type DisapprovalDeleteArgs = {
    /**
     * Select specific fields to fetch from the Disapproval
     * 
    **/
    select?: DisapprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisapprovalInclude | null
    /**
     * Filter which Disapproval to delete.
     * 
    **/
    where: DisapprovalWhereUniqueInput
  }


  /**
   * Disapproval deleteMany
   */
  export type DisapprovalDeleteManyArgs = {
    /**
     * Filter which Disapprovals to delete
     * 
    **/
    where?: DisapprovalWhereInput
  }


  /**
   * Disapproval: findUniqueOrThrow
   */
  export type DisapprovalFindUniqueOrThrowArgs = DisapprovalFindUniqueArgsBase
      

  /**
   * Disapproval: findFirstOrThrow
   */
  export type DisapprovalFindFirstOrThrowArgs = DisapprovalFindFirstArgsBase
      

  /**
   * Disapproval without action
   */
  export type DisapprovalArgs = {
    /**
     * Select specific fields to fetch from the Disapproval
     * 
    **/
    select?: DisapprovalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisapprovalInclude | null
  }



  /**
   * Model Vote
   */


  export type AggregateVote = {
    _count: VoteCountAggregateOutputType | null
    _avg: VoteAvgAggregateOutputType | null
    _sum: VoteSumAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  export type VoteAvgAggregateOutputType = {
    proposal_id: number | null
  }

  export type VoteSumAggregateOutputType = {
    proposal_id: number | null
  }

  export type VoteMinAggregateOutputType = {
    proposal_id: number | null
    user_id: string | null
    type: VoteType | null
  }

  export type VoteMaxAggregateOutputType = {
    proposal_id: number | null
    user_id: string | null
    type: VoteType | null
  }

  export type VoteCountAggregateOutputType = {
    proposal_id: number
    user_id: number
    type: number
    _all: number
  }


  export type VoteAvgAggregateInputType = {
    proposal_id?: true
  }

  export type VoteSumAggregateInputType = {
    proposal_id?: true
  }

  export type VoteMinAggregateInputType = {
    proposal_id?: true
    user_id?: true
    type?: true
  }

  export type VoteMaxAggregateInputType = {
    proposal_id?: true
    user_id?: true
    type?: true
  }

  export type VoteCountAggregateInputType = {
    proposal_id?: true
    user_id?: true
    type?: true
    _all?: true
  }

  export type VoteAggregateArgs = {
    /**
     * Filter which Vote to aggregate.
     * 
    **/
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     * 
    **/
    orderBy?: Enumerable<VoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Votes
    **/
    _count?: true | VoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoteMaxAggregateInputType
  }

  export type GetVoteAggregateType<T extends VoteAggregateArgs> = {
        [P in keyof T & keyof AggregateVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVote[P]>
      : GetScalarType<T[P], AggregateVote[P]>
  }




  export type VoteGroupByArgs = {
    where?: VoteWhereInput
    orderBy?: Enumerable<VoteOrderByWithAggregationInput>
    by: Array<VoteScalarFieldEnum>
    having?: VoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoteCountAggregateInputType | true
    _avg?: VoteAvgAggregateInputType
    _sum?: VoteSumAggregateInputType
    _min?: VoteMinAggregateInputType
    _max?: VoteMaxAggregateInputType
  }


  export type VoteGroupByOutputType = {
    proposal_id: number
    user_id: string
    type: VoteType
    _count: VoteCountAggregateOutputType | null
    _avg: VoteAvgAggregateOutputType | null
    _sum: VoteSumAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  type GetVoteGroupByPayload<T extends VoteGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoteGroupByOutputType[P]>
            : GetScalarType<T[P], VoteGroupByOutputType[P]>
        }
      >
    >


  export type VoteSelect = {
    proposal_id?: boolean
    user_id?: boolean
    type?: boolean
    proposal?: boolean | ProposalArgs
  }

  export type VoteInclude = {
    proposal?: boolean | ProposalArgs
  }

  export type VoteGetPayload<
    S extends boolean | null | undefined | VoteArgs,
    U = keyof S
      > = S extends true
        ? Vote
    : S extends undefined
    ? never
    : S extends VoteArgs | VoteFindManyArgs
    ?'include' extends U
    ? Vote  & {
    [P in TrueKeys<S['include']>]:
        P extends 'proposal' ? ProposalGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'proposal' ? ProposalGetPayload<S['select'][P]> :  P extends keyof Vote ? Vote[P] : never
  } 
    : Vote
  : Vote


  type VoteCountArgs = Merge<
    Omit<VoteFindManyArgs, 'select' | 'include'> & {
      select?: VoteCountAggregateInputType | true
    }
  >

  export interface VoteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Vote that matches the filter.
     * @param {VoteFindUniqueArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VoteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VoteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Vote'> extends True ? CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>> : CheckSelect<T, Prisma__VoteClient<Vote | null >, Prisma__VoteClient<VoteGetPayload<T> | null >>

    /**
     * Find the first Vote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VoteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VoteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Vote'> extends True ? CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>> : CheckSelect<T, Prisma__VoteClient<Vote | null >, Prisma__VoteClient<VoteGetPayload<T> | null >>

    /**
     * Find zero or more Votes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votes
     * const votes = await prisma.vote.findMany()
     * 
     * // Get first 10 Votes
     * const votes = await prisma.vote.findMany({ take: 10 })
     * 
     * // Only select the `proposal_id`
     * const voteWithProposal_idOnly = await prisma.vote.findMany({ select: { proposal_id: true } })
     * 
    **/
    findMany<T extends VoteFindManyArgs>(
      args?: SelectSubset<T, VoteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Vote>>, PrismaPromise<Array<VoteGetPayload<T>>>>

    /**
     * Create a Vote.
     * @param {VoteCreateArgs} args - Arguments to create a Vote.
     * @example
     * // Create one Vote
     * const Vote = await prisma.vote.create({
     *   data: {
     *     // ... data to create a Vote
     *   }
     * })
     * 
    **/
    create<T extends VoteCreateArgs>(
      args: SelectSubset<T, VoteCreateArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Create many Votes.
     *     @param {VoteCreateManyArgs} args - Arguments to create many Votes.
     *     @example
     *     // Create many Votes
     *     const vote = await prisma.vote.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VoteCreateManyArgs>(
      args?: SelectSubset<T, VoteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Vote.
     * @param {VoteDeleteArgs} args - Arguments to delete one Vote.
     * @example
     * // Delete one Vote
     * const Vote = await prisma.vote.delete({
     *   where: {
     *     // ... filter to delete one Vote
     *   }
     * })
     * 
    **/
    delete<T extends VoteDeleteArgs>(
      args: SelectSubset<T, VoteDeleteArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Update one Vote.
     * @param {VoteUpdateArgs} args - Arguments to update one Vote.
     * @example
     * // Update one Vote
     * const vote = await prisma.vote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VoteUpdateArgs>(
      args: SelectSubset<T, VoteUpdateArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Delete zero or more Votes.
     * @param {VoteDeleteManyArgs} args - Arguments to filter Votes to delete.
     * @example
     * // Delete a few Votes
     * const { count } = await prisma.vote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VoteDeleteManyArgs>(
      args?: SelectSubset<T, VoteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votes
     * const vote = await prisma.vote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VoteUpdateManyArgs>(
      args: SelectSubset<T, VoteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Vote.
     * @param {VoteUpsertArgs} args - Arguments to update or create a Vote.
     * @example
     * // Update or create a Vote
     * const vote = await prisma.vote.upsert({
     *   create: {
     *     // ... data to create a Vote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vote we want to update
     *   }
     * })
    **/
    upsert<T extends VoteUpsertArgs>(
      args: SelectSubset<T, VoteUpsertArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Find one Vote that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {VoteFindUniqueOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VoteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VoteFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Find the first Vote that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VoteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VoteFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Count the number of Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteCountArgs} args - Arguments to filter Votes to count.
     * @example
     * // Count the number of Votes
     * const count = await prisma.vote.count({
     *   where: {
     *     // ... the filter for the Votes we want to count
     *   }
     * })
    **/
    count<T extends VoteCountArgs>(
      args?: Subset<T, VoteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoteAggregateArgs>(args: Subset<T, VoteAggregateArgs>): PrismaPromise<GetVoteAggregateType<T>>

    /**
     * Group by Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoteGroupByArgs['orderBy'] }
        : { orderBy?: VoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VoteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    proposal<T extends ProposalArgs = {}>(args?: Subset<T, ProposalArgs>): CheckSelect<T, Prisma__ProposalClient<Proposal | null >, Prisma__ProposalClient<ProposalGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Vote base type for findUnique actions
   */
  export type VoteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * Filter, which Vote to fetch.
     * 
    **/
    where: VoteWhereUniqueInput
  }

  /**
   * Vote: findUnique
   */
  export interface VoteFindUniqueArgs extends VoteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vote base type for findFirst actions
   */
  export type VoteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * Filter, which Vote to fetch.
     * 
    **/
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     * 
    **/
    orderBy?: Enumerable<VoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     * 
    **/
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     * 
    **/
    distinct?: Enumerable<VoteScalarFieldEnum>
  }

  /**
   * Vote: findFirst
   */
  export interface VoteFindFirstArgs extends VoteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vote findMany
   */
  export type VoteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * Filter, which Votes to fetch.
     * 
    **/
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     * 
    **/
    orderBy?: Enumerable<VoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Votes.
     * 
    **/
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VoteScalarFieldEnum>
  }


  /**
   * Vote create
   */
  export type VoteCreateArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * The data needed to create a Vote.
     * 
    **/
    data: XOR<VoteCreateInput, VoteUncheckedCreateInput>
  }


  /**
   * Vote createMany
   */
  export type VoteCreateManyArgs = {
    /**
     * The data used to create many Votes.
     * 
    **/
    data: Enumerable<VoteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Vote update
   */
  export type VoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * The data needed to update a Vote.
     * 
    **/
    data: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
    /**
     * Choose, which Vote to update.
     * 
    **/
    where: VoteWhereUniqueInput
  }


  /**
   * Vote updateMany
   */
  export type VoteUpdateManyArgs = {
    /**
     * The data used to update Votes.
     * 
    **/
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyInput>
    /**
     * Filter which Votes to update
     * 
    **/
    where?: VoteWhereInput
  }


  /**
   * Vote upsert
   */
  export type VoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * The filter to search for the Vote to update in case it exists.
     * 
    **/
    where: VoteWhereUniqueInput
    /**
     * In case the Vote found by the `where` argument doesn't exist, create a new Vote with this data.
     * 
    **/
    create: XOR<VoteCreateInput, VoteUncheckedCreateInput>
    /**
     * In case the Vote was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
  }


  /**
   * Vote delete
   */
  export type VoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * Filter which Vote to delete.
     * 
    **/
    where: VoteWhereUniqueInput
  }


  /**
   * Vote deleteMany
   */
  export type VoteDeleteManyArgs = {
    /**
     * Filter which Votes to delete
     * 
    **/
    where?: VoteWhereInput
  }


  /**
   * Vote: findUniqueOrThrow
   */
  export type VoteFindUniqueOrThrowArgs = VoteFindUniqueArgsBase
      

  /**
   * Vote: findFirstOrThrow
   */
  export type VoteFindFirstOrThrowArgs = VoteFindFirstArgsBase
      

  /**
   * Vote without action
   */
  export type VoteArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
  }



  /**
   * Model Report
   */


  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportAvgAggregateOutputType = {
    suggestion_id: number | null
  }

  export type ReportSumAggregateOutputType = {
    suggestion_id: number | null
  }

  export type ReportMinAggregateOutputType = {
    suggestion_id: number | null
    message_id: string | null
    user_id: string | null
    type: ReportType | null
  }

  export type ReportMaxAggregateOutputType = {
    suggestion_id: number | null
    message_id: string | null
    user_id: string | null
    type: ReportType | null
  }

  export type ReportCountAggregateOutputType = {
    suggestion_id: number
    message_id: number
    user_id: number
    type: number
    _all: number
  }


  export type ReportAvgAggregateInputType = {
    suggestion_id?: true
  }

  export type ReportSumAggregateInputType = {
    suggestion_id?: true
  }

  export type ReportMinAggregateInputType = {
    suggestion_id?: true
    message_id?: true
    user_id?: true
    type?: true
  }

  export type ReportMaxAggregateInputType = {
    suggestion_id?: true
    message_id?: true
    user_id?: true
    type?: true
  }

  export type ReportCountAggregateInputType = {
    suggestion_id?: true
    message_id?: true
    user_id?: true
    type?: true
    _all?: true
  }

  export type ReportAggregateArgs = {
    /**
     * Filter which Report to aggregate.
     * 
    **/
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     * 
    **/
    orderBy?: Enumerable<ReportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs = {
    where?: ReportWhereInput
    orderBy?: Enumerable<ReportOrderByWithAggregationInput>
    by: Array<ReportScalarFieldEnum>
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _avg?: ReportAvgAggregateInputType
    _sum?: ReportSumAggregateInputType
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }


  export type ReportGroupByOutputType = {
    suggestion_id: number
    message_id: string
    user_id: string
    type: ReportType
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect = {
    suggestion_id?: boolean
    message_id?: boolean
    user_id?: boolean
    type?: boolean
    suggestion?: boolean | ProposalArgs
  }

  export type ReportInclude = {
    suggestion?: boolean | ProposalArgs
  }

  export type ReportGetPayload<
    S extends boolean | null | undefined | ReportArgs,
    U = keyof S
      > = S extends true
        ? Report
    : S extends undefined
    ? never
    : S extends ReportArgs | ReportFindManyArgs
    ?'include' extends U
    ? Report  & {
    [P in TrueKeys<S['include']>]:
        P extends 'suggestion' ? ProposalGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'suggestion' ? ProposalGetPayload<S['select'][P]> :  P extends keyof Report ? Report[P] : never
  } 
    : Report
  : Report


  type ReportCountArgs = Merge<
    Omit<ReportFindManyArgs, 'select' | 'include'> & {
      select?: ReportCountAggregateInputType | true
    }
  >

  export interface ReportDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReportFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReportFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Report'> extends True ? CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>> : CheckSelect<T, Prisma__ReportClient<Report | null >, Prisma__ReportClient<ReportGetPayload<T> | null >>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReportFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReportFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Report'> extends True ? CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>> : CheckSelect<T, Prisma__ReportClient<Report | null >, Prisma__ReportClient<ReportGetPayload<T> | null >>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `suggestion_id`
     * const reportWithSuggestion_idOnly = await prisma.report.findMany({ select: { suggestion_id: true } })
     * 
    **/
    findMany<T extends ReportFindManyArgs>(
      args?: SelectSubset<T, ReportFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Report>>, PrismaPromise<Array<ReportGetPayload<T>>>>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
    **/
    create<T extends ReportCreateArgs>(
      args: SelectSubset<T, ReportCreateArgs>
    ): CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>>

    /**
     * Create many Reports.
     *     @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     *     @example
     *     // Create many Reports
     *     const report = await prisma.report.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReportCreateManyArgs>(
      args?: SelectSubset<T, ReportCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
    **/
    delete<T extends ReportDeleteArgs>(
      args: SelectSubset<T, ReportDeleteArgs>
    ): CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReportUpdateArgs>(
      args: SelectSubset<T, ReportUpdateArgs>
    ): CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReportDeleteManyArgs>(
      args?: SelectSubset<T, ReportDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReportUpdateManyArgs>(
      args: SelectSubset<T, ReportUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
    **/
    upsert<T extends ReportUpsertArgs>(
      args: SelectSubset<T, ReportUpsertArgs>
    ): CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>>

    /**
     * Find one Report that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReportFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>>

    /**
     * Find the first Report that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReportFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ReportClient<Report>, Prisma__ReportClient<ReportGetPayload<T>>>

    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReportClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    suggestion<T extends ProposalArgs = {}>(args?: Subset<T, ProposalArgs>): CheckSelect<T, Prisma__ProposalClient<Proposal | null >, Prisma__ProposalClient<ProposalGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Report base type for findUnique actions
   */
  export type ReportFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * Filter, which Report to fetch.
     * 
    **/
    where: ReportWhereUniqueInput
  }

  /**
   * Report: findUnique
   */
  export interface ReportFindUniqueArgs extends ReportFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Report base type for findFirst actions
   */
  export type ReportFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * Filter, which Report to fetch.
     * 
    **/
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     * 
    **/
    orderBy?: Enumerable<ReportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     * 
    **/
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     * 
    **/
    distinct?: Enumerable<ReportScalarFieldEnum>
  }

  /**
   * Report: findFirst
   */
  export interface ReportFindFirstArgs extends ReportFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Report findMany
   */
  export type ReportFindManyArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * Filter, which Reports to fetch.
     * 
    **/
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     * 
    **/
    orderBy?: Enumerable<ReportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     * 
    **/
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReportScalarFieldEnum>
  }


  /**
   * Report create
   */
  export type ReportCreateArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * The data needed to create a Report.
     * 
    **/
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }


  /**
   * Report createMany
   */
  export type ReportCreateManyArgs = {
    /**
     * The data used to create many Reports.
     * 
    **/
    data: Enumerable<ReportCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Report update
   */
  export type ReportUpdateArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * The data needed to update a Report.
     * 
    **/
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     * 
    **/
    where: ReportWhereUniqueInput
  }


  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs = {
    /**
     * The data used to update Reports.
     * 
    **/
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     * 
    **/
    where?: ReportWhereInput
  }


  /**
   * Report upsert
   */
  export type ReportUpsertArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * The filter to search for the Report to update in case it exists.
     * 
    **/
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     * 
    **/
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }


  /**
   * Report delete
   */
  export type ReportDeleteArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
    /**
     * Filter which Report to delete.
     * 
    **/
    where: ReportWhereUniqueInput
  }


  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs = {
    /**
     * Filter which Reports to delete
     * 
    **/
    where?: ReportWhereInput
  }


  /**
   * Report: findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs = ReportFindUniqueArgsBase
      

  /**
   * Report: findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs = ReportFindFirstArgsBase
      

  /**
   * Report without action
   */
  export type ReportArgs = {
    /**
     * Select specific fields to fetch from the Report
     * 
    **/
    select?: ReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReportInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    user_name: 'user_name',
    user_avatar: 'user_avatar',
    user_token: 'user_token',
    user_token_refresh: 'user_token_refresh',
    token: 'token',
    token_key: 'token_key',
    limit: 'limit'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GodfatherScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    emoji_id: 'emoji_id'
  };

  export type GodfatherScalarFieldEnum = (typeof GodfatherScalarFieldEnum)[keyof typeof GodfatherScalarFieldEnum]


  export const ProposalScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    message_id: 'message_id',
    type: 'type',
    joke_id: 'joke_id',
    joke_type: 'joke_type',
    joke_question: 'joke_question',
    joke_answer: 'joke_answer',
    merged: 'merged',
    refused: 'refused',
    stale: 'stale',
    created_at: 'created_at',
    suggestion_id: 'suggestion_id'
  };

  export type ProposalScalarFieldEnum = (typeof ProposalScalarFieldEnum)[keyof typeof ProposalScalarFieldEnum]


  export const ApprovalScalarFieldEnum: {
    proposal_id: 'proposal_id',
    user_id: 'user_id'
  };

  export type ApprovalScalarFieldEnum = (typeof ApprovalScalarFieldEnum)[keyof typeof ApprovalScalarFieldEnum]


  export const DisapprovalScalarFieldEnum: {
    proposal_id: 'proposal_id',
    user_id: 'user_id'
  };

  export type DisapprovalScalarFieldEnum = (typeof DisapprovalScalarFieldEnum)[keyof typeof DisapprovalScalarFieldEnum]


  export const VoteScalarFieldEnum: {
    proposal_id: 'proposal_id',
    user_id: 'user_id',
    type: 'type'
  };

  export type VoteScalarFieldEnum = (typeof VoteScalarFieldEnum)[keyof typeof VoteScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    suggestion_id: 'suggestion_id',
    message_id: 'message_id',
    user_id: 'user_id',
    type: 'type'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    user_id?: StringFilter | string
    user_name?: StringFilter | string
    user_avatar?: StringFilter | string
    user_token?: StringFilter | string
    user_token_refresh?: StringFilter | string
    token?: StringFilter | string
    token_key?: StringFilter | string
    limit?: IntFilter | number
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    user_avatar?: SortOrder
    user_token?: SortOrder
    user_token_refresh?: SortOrder
    token?: SortOrder
    token_key?: SortOrder
    limit?: SortOrder
  }

  export type UserWhereUniqueInput = {
    user_id?: string
  }

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    user_avatar?: SortOrder
    user_token?: SortOrder
    user_token_refresh?: SortOrder
    token?: SortOrder
    token_key?: SortOrder
    limit?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    user_id?: StringWithAggregatesFilter | string
    user_name?: StringWithAggregatesFilter | string
    user_avatar?: StringWithAggregatesFilter | string
    user_token?: StringWithAggregatesFilter | string
    user_token_refresh?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    token_key?: StringWithAggregatesFilter | string
    limit?: IntWithAggregatesFilter | number
  }

  export type GodfatherWhereInput = {
    AND?: Enumerable<GodfatherWhereInput>
    OR?: Enumerable<GodfatherWhereInput>
    NOT?: Enumerable<GodfatherWhereInput>
    id?: IntFilter | number
    user_id?: StringFilter | string
    emoji_id?: StringFilter | string
  }

  export type GodfatherOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    emoji_id?: SortOrder
  }

  export type GodfatherWhereUniqueInput = {
    id?: number
    user_id?: string
  }

  export type GodfatherOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    emoji_id?: SortOrder
    _count?: GodfatherCountOrderByAggregateInput
    _avg?: GodfatherAvgOrderByAggregateInput
    _max?: GodfatherMaxOrderByAggregateInput
    _min?: GodfatherMinOrderByAggregateInput
    _sum?: GodfatherSumOrderByAggregateInput
  }

  export type GodfatherScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GodfatherScalarWhereWithAggregatesInput>
    OR?: Enumerable<GodfatherScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GodfatherScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: StringWithAggregatesFilter | string
    emoji_id?: StringWithAggregatesFilter | string
  }

  export type ProposalWhereInput = {
    AND?: Enumerable<ProposalWhereInput>
    OR?: Enumerable<ProposalWhereInput>
    NOT?: Enumerable<ProposalWhereInput>
    id?: IntFilter | number
    user_id?: StringNullableFilter | string | null
    message_id?: StringNullableFilter | string | null
    type?: EnumProposalTypeFilter | ProposalType
    joke_id?: IntNullableFilter | number | null
    joke_type?: StringNullableFilter | string | null
    joke_question?: StringNullableFilter | string | null
    joke_answer?: StringNullableFilter | string | null
    merged?: BoolFilter | boolean
    refused?: BoolFilter | boolean
    stale?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    approvals?: ApprovalListRelationFilter
    disapprovals?: DisapprovalListRelationFilter
    votes?: VoteListRelationFilter
    suggestion_id?: IntNullableFilter | number | null
    suggestion?: XOR<ProposalRelationFilter, ProposalWhereInput> | null
    corrections?: ProposalListRelationFilter
    reports?: ReportListRelationFilter
  }

  export type ProposalOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    message_id?: SortOrder
    type?: SortOrder
    joke_id?: SortOrder
    joke_type?: SortOrder
    joke_question?: SortOrder
    joke_answer?: SortOrder
    merged?: SortOrder
    refused?: SortOrder
    stale?: SortOrder
    created_at?: SortOrder
    approvals?: ApprovalOrderByRelationAggregateInput
    disapprovals?: DisapprovalOrderByRelationAggregateInput
    votes?: VoteOrderByRelationAggregateInput
    suggestion_id?: SortOrder
    suggestion?: ProposalOrderByWithRelationInput
    corrections?: ProposalOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
  }

  export type ProposalWhereUniqueInput = {
    id?: number
    message_id?: string
    joke_id?: number
    suggestion_id?: number
  }

  export type ProposalOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    message_id?: SortOrder
    type?: SortOrder
    joke_id?: SortOrder
    joke_type?: SortOrder
    joke_question?: SortOrder
    joke_answer?: SortOrder
    merged?: SortOrder
    refused?: SortOrder
    stale?: SortOrder
    created_at?: SortOrder
    suggestion_id?: SortOrder
    _count?: ProposalCountOrderByAggregateInput
    _avg?: ProposalAvgOrderByAggregateInput
    _max?: ProposalMaxOrderByAggregateInput
    _min?: ProposalMinOrderByAggregateInput
    _sum?: ProposalSumOrderByAggregateInput
  }

  export type ProposalScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProposalScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProposalScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProposalScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: StringNullableWithAggregatesFilter | string | null
    message_id?: StringNullableWithAggregatesFilter | string | null
    type?: EnumProposalTypeWithAggregatesFilter | ProposalType
    joke_id?: IntNullableWithAggregatesFilter | number | null
    joke_type?: StringNullableWithAggregatesFilter | string | null
    joke_question?: StringNullableWithAggregatesFilter | string | null
    joke_answer?: StringNullableWithAggregatesFilter | string | null
    merged?: BoolWithAggregatesFilter | boolean
    refused?: BoolWithAggregatesFilter | boolean
    stale?: BoolWithAggregatesFilter | boolean
    created_at?: DateTimeWithAggregatesFilter | Date | string
    suggestion_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type ApprovalWhereInput = {
    AND?: Enumerable<ApprovalWhereInput>
    OR?: Enumerable<ApprovalWhereInput>
    NOT?: Enumerable<ApprovalWhereInput>
    proposal_id?: IntFilter | number
    user_id?: StringFilter | string
    proposal?: XOR<ProposalRelationFilter, ProposalWhereInput>
  }

  export type ApprovalOrderByWithRelationInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
    proposal?: ProposalOrderByWithRelationInput
  }

  export type ApprovalWhereUniqueInput = {
    proposal_id_user_id?: ApprovalProposal_idUser_idCompoundUniqueInput
  }

  export type ApprovalOrderByWithAggregationInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
    _count?: ApprovalCountOrderByAggregateInput
    _avg?: ApprovalAvgOrderByAggregateInput
    _max?: ApprovalMaxOrderByAggregateInput
    _min?: ApprovalMinOrderByAggregateInput
    _sum?: ApprovalSumOrderByAggregateInput
  }

  export type ApprovalScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ApprovalScalarWhereWithAggregatesInput>
    OR?: Enumerable<ApprovalScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ApprovalScalarWhereWithAggregatesInput>
    proposal_id?: IntWithAggregatesFilter | number
    user_id?: StringWithAggregatesFilter | string
  }

  export type DisapprovalWhereInput = {
    AND?: Enumerable<DisapprovalWhereInput>
    OR?: Enumerable<DisapprovalWhereInput>
    NOT?: Enumerable<DisapprovalWhereInput>
    proposal_id?: IntFilter | number
    user_id?: StringFilter | string
    proposal?: XOR<ProposalRelationFilter, ProposalWhereInput>
  }

  export type DisapprovalOrderByWithRelationInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
    proposal?: ProposalOrderByWithRelationInput
  }

  export type DisapprovalWhereUniqueInput = {
    proposal_id_user_id?: DisapprovalProposal_idUser_idCompoundUniqueInput
  }

  export type DisapprovalOrderByWithAggregationInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
    _count?: DisapprovalCountOrderByAggregateInput
    _avg?: DisapprovalAvgOrderByAggregateInput
    _max?: DisapprovalMaxOrderByAggregateInput
    _min?: DisapprovalMinOrderByAggregateInput
    _sum?: DisapprovalSumOrderByAggregateInput
  }

  export type DisapprovalScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DisapprovalScalarWhereWithAggregatesInput>
    OR?: Enumerable<DisapprovalScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DisapprovalScalarWhereWithAggregatesInput>
    proposal_id?: IntWithAggregatesFilter | number
    user_id?: StringWithAggregatesFilter | string
  }

  export type VoteWhereInput = {
    AND?: Enumerable<VoteWhereInput>
    OR?: Enumerable<VoteWhereInput>
    NOT?: Enumerable<VoteWhereInput>
    proposal_id?: IntFilter | number
    user_id?: StringFilter | string
    type?: EnumVoteTypeFilter | VoteType
    proposal?: XOR<ProposalRelationFilter, ProposalWhereInput>
  }

  export type VoteOrderByWithRelationInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    proposal?: ProposalOrderByWithRelationInput
  }

  export type VoteWhereUniqueInput = {
    proposal_id_user_id?: VoteProposal_idUser_idCompoundUniqueInput
  }

  export type VoteOrderByWithAggregationInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    _count?: VoteCountOrderByAggregateInput
    _avg?: VoteAvgOrderByAggregateInput
    _max?: VoteMaxOrderByAggregateInput
    _min?: VoteMinOrderByAggregateInput
    _sum?: VoteSumOrderByAggregateInput
  }

  export type VoteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VoteScalarWhereWithAggregatesInput>
    OR?: Enumerable<VoteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VoteScalarWhereWithAggregatesInput>
    proposal_id?: IntWithAggregatesFilter | number
    user_id?: StringWithAggregatesFilter | string
    type?: EnumVoteTypeWithAggregatesFilter | VoteType
  }

  export type ReportWhereInput = {
    AND?: Enumerable<ReportWhereInput>
    OR?: Enumerable<ReportWhereInput>
    NOT?: Enumerable<ReportWhereInput>
    suggestion_id?: IntFilter | number
    message_id?: StringFilter | string
    user_id?: StringFilter | string
    type?: EnumReportTypeFilter | ReportType
    suggestion?: XOR<ProposalRelationFilter, ProposalWhereInput>
  }

  export type ReportOrderByWithRelationInput = {
    suggestion_id?: SortOrder
    message_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    suggestion?: ProposalOrderByWithRelationInput
  }

  export type ReportWhereUniqueInput = {
    suggestion_id?: number
    message_id?: string
    suggestion_id_user_id?: ReportSuggestion_idUser_idCompoundUniqueInput
  }

  export type ReportOrderByWithAggregationInput = {
    suggestion_id?: SortOrder
    message_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _avg?: ReportAvgOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
    _sum?: ReportSumOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReportScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReportScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReportScalarWhereWithAggregatesInput>
    suggestion_id?: IntWithAggregatesFilter | number
    message_id?: StringWithAggregatesFilter | string
    user_id?: StringWithAggregatesFilter | string
    type?: EnumReportTypeWithAggregatesFilter | ReportType
  }

  export type UserCreateInput = {
    user_id: string
    user_name: string
    user_avatar: string
    user_token: string
    user_token_refresh: string
    token: string
    token_key: string
    limit?: number
  }

  export type UserUncheckedCreateInput = {
    user_id: string
    user_name: string
    user_avatar: string
    user_token: string
    user_token_refresh: string
    token: string
    token_key: string
    limit?: number
  }

  export type UserUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    user_avatar?: StringFieldUpdateOperationsInput | string
    user_token?: StringFieldUpdateOperationsInput | string
    user_token_refresh?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    token_key?: StringFieldUpdateOperationsInput | string
    limit?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    user_avatar?: StringFieldUpdateOperationsInput | string
    user_token?: StringFieldUpdateOperationsInput | string
    user_token_refresh?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    token_key?: StringFieldUpdateOperationsInput | string
    limit?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateManyInput = {
    user_id: string
    user_name: string
    user_avatar: string
    user_token: string
    user_token_refresh: string
    token: string
    token_key: string
    limit?: number
  }

  export type UserUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    user_avatar?: StringFieldUpdateOperationsInput | string
    user_token?: StringFieldUpdateOperationsInput | string
    user_token_refresh?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    token_key?: StringFieldUpdateOperationsInput | string
    limit?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    user_avatar?: StringFieldUpdateOperationsInput | string
    user_token?: StringFieldUpdateOperationsInput | string
    user_token_refresh?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    token_key?: StringFieldUpdateOperationsInput | string
    limit?: IntFieldUpdateOperationsInput | number
  }

  export type GodfatherCreateInput = {
    user_id: string
    emoji_id: string
  }

  export type GodfatherUncheckedCreateInput = {
    id?: number
    user_id: string
    emoji_id: string
  }

  export type GodfatherUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    emoji_id?: StringFieldUpdateOperationsInput | string
  }

  export type GodfatherUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    emoji_id?: StringFieldUpdateOperationsInput | string
  }

  export type GodfatherCreateManyInput = {
    id?: number
    user_id: string
    emoji_id: string
  }

  export type GodfatherUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    emoji_id?: StringFieldUpdateOperationsInput | string
  }

  export type GodfatherUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    emoji_id?: StringFieldUpdateOperationsInput | string
  }

  export type ProposalCreateInput = {
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutProposalInput
    disapprovals?: DisapprovalCreateNestedManyWithoutProposalInput
    votes?: VoteCreateNestedManyWithoutProposalInput
    suggestion?: ProposalCreateNestedOneWithoutCorrectionsInput
    corrections?: ProposalCreateNestedManyWithoutSuggestionInput
    reports?: ReportCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalUncheckedCreateInput = {
    id?: number
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProposalInput
    disapprovals?: DisapprovalUncheckedCreateNestedManyWithoutProposalInput
    votes?: VoteUncheckedCreateNestedManyWithoutProposalInput
    suggestion_id?: number | null
    corrections?: ProposalUncheckedCreateNestedManyWithoutSuggestionInput
    reports?: ReportUncheckedCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalUpdateInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutProposalNestedInput
    disapprovals?: DisapprovalUpdateManyWithoutProposalNestedInput
    votes?: VoteUpdateManyWithoutProposalNestedInput
    suggestion?: ProposalUpdateOneWithoutCorrectionsNestedInput
    corrections?: ProposalUpdateManyWithoutSuggestionNestedInput
    reports?: ReportUpdateManyWithoutSuggestionNestedInput
  }

  export type ProposalUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutProposalNestedInput
    disapprovals?: DisapprovalUncheckedUpdateManyWithoutProposalNestedInput
    votes?: VoteUncheckedUpdateManyWithoutProposalNestedInput
    suggestion_id?: NullableIntFieldUpdateOperationsInput | number | null
    corrections?: ProposalUncheckedUpdateManyWithoutSuggestionNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSuggestionNestedInput
  }

  export type ProposalCreateManyInput = {
    id?: number
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    suggestion_id?: number | null
  }

  export type ProposalUpdateManyMutationInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposalUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    suggestion_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ApprovalCreateInput = {
    user_id: string
    proposal: ProposalCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalUncheckedCreateInput = {
    proposal_id: number
    user_id: string
  }

  export type ApprovalUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    proposal?: ProposalUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalUncheckedUpdateInput = {
    proposal_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type ApprovalCreateManyInput = {
    proposal_id: number
    user_id: string
  }

  export type ApprovalUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type ApprovalUncheckedUpdateManyInput = {
    proposal_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type DisapprovalCreateInput = {
    user_id: string
    proposal: ProposalCreateNestedOneWithoutDisapprovalsInput
  }

  export type DisapprovalUncheckedCreateInput = {
    proposal_id: number
    user_id: string
  }

  export type DisapprovalUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    proposal?: ProposalUpdateOneRequiredWithoutDisapprovalsNestedInput
  }

  export type DisapprovalUncheckedUpdateInput = {
    proposal_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type DisapprovalCreateManyInput = {
    proposal_id: number
    user_id: string
  }

  export type DisapprovalUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type DisapprovalUncheckedUpdateManyInput = {
    proposal_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type VoteCreateInput = {
    user_id: string
    type: VoteType
    proposal: ProposalCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateInput = {
    proposal_id: number
    user_id: string
    type: VoteType
  }

  export type VoteUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumVoteTypeFieldUpdateOperationsInput | VoteType
    proposal?: ProposalUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateInput = {
    proposal_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumVoteTypeFieldUpdateOperationsInput | VoteType
  }

  export type VoteCreateManyInput = {
    proposal_id: number
    user_id: string
    type: VoteType
  }

  export type VoteUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumVoteTypeFieldUpdateOperationsInput | VoteType
  }

  export type VoteUncheckedUpdateManyInput = {
    proposal_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumVoteTypeFieldUpdateOperationsInput | VoteType
  }

  export type ReportCreateInput = {
    message_id: string
    user_id: string
    type: ReportType
    suggestion: ProposalCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateInput = {
    suggestion_id: number
    message_id: string
    user_id: string
    type: ReportType
  }

  export type ReportUpdateInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumReportTypeFieldUpdateOperationsInput | ReportType
    suggestion?: ProposalUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    suggestion_id?: IntFieldUpdateOperationsInput | number
    message_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumReportTypeFieldUpdateOperationsInput | ReportType
  }

  export type ReportCreateManyInput = {
    suggestion_id: number
    message_id: string
    user_id: string
    type: ReportType
  }

  export type ReportUpdateManyMutationInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumReportTypeFieldUpdateOperationsInput | ReportType
  }

  export type ReportUncheckedUpdateManyInput = {
    suggestion_id?: IntFieldUpdateOperationsInput | number
    message_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumReportTypeFieldUpdateOperationsInput | ReportType
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    user_avatar?: SortOrder
    user_token?: SortOrder
    user_token_refresh?: SortOrder
    token?: SortOrder
    token_key?: SortOrder
    limit?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    limit?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    user_avatar?: SortOrder
    user_token?: SortOrder
    user_token_refresh?: SortOrder
    token?: SortOrder
    token_key?: SortOrder
    limit?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    user_avatar?: SortOrder
    user_token?: SortOrder
    user_token_refresh?: SortOrder
    token?: SortOrder
    token_key?: SortOrder
    limit?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    limit?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type GodfatherCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    emoji_id?: SortOrder
  }

  export type GodfatherAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GodfatherMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    emoji_id?: SortOrder
  }

  export type GodfatherMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    emoji_id?: SortOrder
  }

  export type GodfatherSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumProposalTypeFilter = {
    equals?: ProposalType
    in?: Enumerable<ProposalType>
    notIn?: Enumerable<ProposalType>
    not?: NestedEnumProposalTypeFilter | ProposalType
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ApprovalListRelationFilter = {
    every?: ApprovalWhereInput
    some?: ApprovalWhereInput
    none?: ApprovalWhereInput
  }

  export type DisapprovalListRelationFilter = {
    every?: DisapprovalWhereInput
    some?: DisapprovalWhereInput
    none?: DisapprovalWhereInput
  }

  export type VoteListRelationFilter = {
    every?: VoteWhereInput
    some?: VoteWhereInput
    none?: VoteWhereInput
  }

  export type ProposalRelationFilter = {
    is?: ProposalWhereInput
    isNot?: ProposalWhereInput
  }

  export type ProposalListRelationFilter = {
    every?: ProposalWhereInput
    some?: ProposalWhereInput
    none?: ProposalWhereInput
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type ApprovalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DisapprovalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProposalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProposalCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    message_id?: SortOrder
    type?: SortOrder
    joke_id?: SortOrder
    joke_type?: SortOrder
    joke_question?: SortOrder
    joke_answer?: SortOrder
    merged?: SortOrder
    refused?: SortOrder
    stale?: SortOrder
    created_at?: SortOrder
    suggestion_id?: SortOrder
  }

  export type ProposalAvgOrderByAggregateInput = {
    id?: SortOrder
    joke_id?: SortOrder
    suggestion_id?: SortOrder
  }

  export type ProposalMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    message_id?: SortOrder
    type?: SortOrder
    joke_id?: SortOrder
    joke_type?: SortOrder
    joke_question?: SortOrder
    joke_answer?: SortOrder
    merged?: SortOrder
    refused?: SortOrder
    stale?: SortOrder
    created_at?: SortOrder
    suggestion_id?: SortOrder
  }

  export type ProposalMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    message_id?: SortOrder
    type?: SortOrder
    joke_id?: SortOrder
    joke_type?: SortOrder
    joke_question?: SortOrder
    joke_answer?: SortOrder
    merged?: SortOrder
    refused?: SortOrder
    stale?: SortOrder
    created_at?: SortOrder
    suggestion_id?: SortOrder
  }

  export type ProposalSumOrderByAggregateInput = {
    id?: SortOrder
    joke_id?: SortOrder
    suggestion_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumProposalTypeWithAggregatesFilter = {
    equals?: ProposalType
    in?: Enumerable<ProposalType>
    notIn?: Enumerable<ProposalType>
    not?: NestedEnumProposalTypeWithAggregatesFilter | ProposalType
    _count?: NestedIntFilter
    _min?: NestedEnumProposalTypeFilter
    _max?: NestedEnumProposalTypeFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ApprovalProposal_idUser_idCompoundUniqueInput = {
    proposal_id: number
    user_id: string
  }

  export type ApprovalCountOrderByAggregateInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
  }

  export type ApprovalAvgOrderByAggregateInput = {
    proposal_id?: SortOrder
  }

  export type ApprovalMaxOrderByAggregateInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
  }

  export type ApprovalMinOrderByAggregateInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
  }

  export type ApprovalSumOrderByAggregateInput = {
    proposal_id?: SortOrder
  }

  export type DisapprovalProposal_idUser_idCompoundUniqueInput = {
    proposal_id: number
    user_id: string
  }

  export type DisapprovalCountOrderByAggregateInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
  }

  export type DisapprovalAvgOrderByAggregateInput = {
    proposal_id?: SortOrder
  }

  export type DisapprovalMaxOrderByAggregateInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
  }

  export type DisapprovalMinOrderByAggregateInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
  }

  export type DisapprovalSumOrderByAggregateInput = {
    proposal_id?: SortOrder
  }

  export type EnumVoteTypeFilter = {
    equals?: VoteType
    in?: Enumerable<VoteType>
    notIn?: Enumerable<VoteType>
    not?: NestedEnumVoteTypeFilter | VoteType
  }

  export type VoteProposal_idUser_idCompoundUniqueInput = {
    proposal_id: number
    user_id: string
  }

  export type VoteCountOrderByAggregateInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
  }

  export type VoteAvgOrderByAggregateInput = {
    proposal_id?: SortOrder
  }

  export type VoteMaxOrderByAggregateInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
  }

  export type VoteMinOrderByAggregateInput = {
    proposal_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
  }

  export type VoteSumOrderByAggregateInput = {
    proposal_id?: SortOrder
  }

  export type EnumVoteTypeWithAggregatesFilter = {
    equals?: VoteType
    in?: Enumerable<VoteType>
    notIn?: Enumerable<VoteType>
    not?: NestedEnumVoteTypeWithAggregatesFilter | VoteType
    _count?: NestedIntFilter
    _min?: NestedEnumVoteTypeFilter
    _max?: NestedEnumVoteTypeFilter
  }

  export type EnumReportTypeFilter = {
    equals?: ReportType
    in?: Enumerable<ReportType>
    notIn?: Enumerable<ReportType>
    not?: NestedEnumReportTypeFilter | ReportType
  }

  export type ReportSuggestion_idUser_idCompoundUniqueInput = {
    suggestion_id: number
    user_id: string
  }

  export type ReportCountOrderByAggregateInput = {
    suggestion_id?: SortOrder
    message_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
  }

  export type ReportAvgOrderByAggregateInput = {
    suggestion_id?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    suggestion_id?: SortOrder
    message_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    suggestion_id?: SortOrder
    message_id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
  }

  export type ReportSumOrderByAggregateInput = {
    suggestion_id?: SortOrder
  }

  export type EnumReportTypeWithAggregatesFilter = {
    equals?: ReportType
    in?: Enumerable<ReportType>
    notIn?: Enumerable<ReportType>
    not?: NestedEnumReportTypeWithAggregatesFilter | ReportType
    _count?: NestedIntFilter
    _min?: NestedEnumReportTypeFilter
    _max?: NestedEnumReportTypeFilter
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ApprovalCreateNestedManyWithoutProposalInput = {
    create?: XOR<Enumerable<ApprovalCreateWithoutProposalInput>, Enumerable<ApprovalUncheckedCreateWithoutProposalInput>>
    connectOrCreate?: Enumerable<ApprovalCreateOrConnectWithoutProposalInput>
    createMany?: ApprovalCreateManyProposalInputEnvelope
    connect?: Enumerable<ApprovalWhereUniqueInput>
  }

  export type DisapprovalCreateNestedManyWithoutProposalInput = {
    create?: XOR<Enumerable<DisapprovalCreateWithoutProposalInput>, Enumerable<DisapprovalUncheckedCreateWithoutProposalInput>>
    connectOrCreate?: Enumerable<DisapprovalCreateOrConnectWithoutProposalInput>
    createMany?: DisapprovalCreateManyProposalInputEnvelope
    connect?: Enumerable<DisapprovalWhereUniqueInput>
  }

  export type VoteCreateNestedManyWithoutProposalInput = {
    create?: XOR<Enumerable<VoteCreateWithoutProposalInput>, Enumerable<VoteUncheckedCreateWithoutProposalInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutProposalInput>
    createMany?: VoteCreateManyProposalInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type ProposalCreateNestedOneWithoutCorrectionsInput = {
    create?: XOR<ProposalCreateWithoutCorrectionsInput, ProposalUncheckedCreateWithoutCorrectionsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutCorrectionsInput
    connect?: ProposalWhereUniqueInput
  }

  export type ProposalCreateNestedManyWithoutSuggestionInput = {
    create?: XOR<Enumerable<ProposalCreateWithoutSuggestionInput>, Enumerable<ProposalUncheckedCreateWithoutSuggestionInput>>
    connectOrCreate?: Enumerable<ProposalCreateOrConnectWithoutSuggestionInput>
    createMany?: ProposalCreateManySuggestionInputEnvelope
    connect?: Enumerable<ProposalWhereUniqueInput>
  }

  export type ReportCreateNestedManyWithoutSuggestionInput = {
    create?: XOR<Enumerable<ReportCreateWithoutSuggestionInput>, Enumerable<ReportUncheckedCreateWithoutSuggestionInput>>
    connectOrCreate?: Enumerable<ReportCreateOrConnectWithoutSuggestionInput>
    createMany?: ReportCreateManySuggestionInputEnvelope
    connect?: Enumerable<ReportWhereUniqueInput>
  }

  export type ApprovalUncheckedCreateNestedManyWithoutProposalInput = {
    create?: XOR<Enumerable<ApprovalCreateWithoutProposalInput>, Enumerable<ApprovalUncheckedCreateWithoutProposalInput>>
    connectOrCreate?: Enumerable<ApprovalCreateOrConnectWithoutProposalInput>
    createMany?: ApprovalCreateManyProposalInputEnvelope
    connect?: Enumerable<ApprovalWhereUniqueInput>
  }

  export type DisapprovalUncheckedCreateNestedManyWithoutProposalInput = {
    create?: XOR<Enumerable<DisapprovalCreateWithoutProposalInput>, Enumerable<DisapprovalUncheckedCreateWithoutProposalInput>>
    connectOrCreate?: Enumerable<DisapprovalCreateOrConnectWithoutProposalInput>
    createMany?: DisapprovalCreateManyProposalInputEnvelope
    connect?: Enumerable<DisapprovalWhereUniqueInput>
  }

  export type VoteUncheckedCreateNestedManyWithoutProposalInput = {
    create?: XOR<Enumerable<VoteCreateWithoutProposalInput>, Enumerable<VoteUncheckedCreateWithoutProposalInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutProposalInput>
    createMany?: VoteCreateManyProposalInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type ProposalUncheckedCreateNestedManyWithoutSuggestionInput = {
    create?: XOR<Enumerable<ProposalCreateWithoutSuggestionInput>, Enumerable<ProposalUncheckedCreateWithoutSuggestionInput>>
    connectOrCreate?: Enumerable<ProposalCreateOrConnectWithoutSuggestionInput>
    createMany?: ProposalCreateManySuggestionInputEnvelope
    connect?: Enumerable<ProposalWhereUniqueInput>
  }

  export type ReportUncheckedCreateNestedManyWithoutSuggestionInput = {
    create?: XOR<Enumerable<ReportCreateWithoutSuggestionInput>, Enumerable<ReportUncheckedCreateWithoutSuggestionInput>>
    connectOrCreate?: Enumerable<ReportCreateOrConnectWithoutSuggestionInput>
    createMany?: ReportCreateManySuggestionInputEnvelope
    connect?: Enumerable<ReportWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumProposalTypeFieldUpdateOperationsInput = {
    set?: ProposalType
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ApprovalUpdateManyWithoutProposalNestedInput = {
    create?: XOR<Enumerable<ApprovalCreateWithoutProposalInput>, Enumerable<ApprovalUncheckedCreateWithoutProposalInput>>
    connectOrCreate?: Enumerable<ApprovalCreateOrConnectWithoutProposalInput>
    upsert?: Enumerable<ApprovalUpsertWithWhereUniqueWithoutProposalInput>
    createMany?: ApprovalCreateManyProposalInputEnvelope
    set?: Enumerable<ApprovalWhereUniqueInput>
    disconnect?: Enumerable<ApprovalWhereUniqueInput>
    delete?: Enumerable<ApprovalWhereUniqueInput>
    connect?: Enumerable<ApprovalWhereUniqueInput>
    update?: Enumerable<ApprovalUpdateWithWhereUniqueWithoutProposalInput>
    updateMany?: Enumerable<ApprovalUpdateManyWithWhereWithoutProposalInput>
    deleteMany?: Enumerable<ApprovalScalarWhereInput>
  }

  export type DisapprovalUpdateManyWithoutProposalNestedInput = {
    create?: XOR<Enumerable<DisapprovalCreateWithoutProposalInput>, Enumerable<DisapprovalUncheckedCreateWithoutProposalInput>>
    connectOrCreate?: Enumerable<DisapprovalCreateOrConnectWithoutProposalInput>
    upsert?: Enumerable<DisapprovalUpsertWithWhereUniqueWithoutProposalInput>
    createMany?: DisapprovalCreateManyProposalInputEnvelope
    set?: Enumerable<DisapprovalWhereUniqueInput>
    disconnect?: Enumerable<DisapprovalWhereUniqueInput>
    delete?: Enumerable<DisapprovalWhereUniqueInput>
    connect?: Enumerable<DisapprovalWhereUniqueInput>
    update?: Enumerable<DisapprovalUpdateWithWhereUniqueWithoutProposalInput>
    updateMany?: Enumerable<DisapprovalUpdateManyWithWhereWithoutProposalInput>
    deleteMany?: Enumerable<DisapprovalScalarWhereInput>
  }

  export type VoteUpdateManyWithoutProposalNestedInput = {
    create?: XOR<Enumerable<VoteCreateWithoutProposalInput>, Enumerable<VoteUncheckedCreateWithoutProposalInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutProposalInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutProposalInput>
    createMany?: VoteCreateManyProposalInputEnvelope
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    connect?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutProposalInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutProposalInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type ProposalUpdateOneWithoutCorrectionsNestedInput = {
    create?: XOR<ProposalCreateWithoutCorrectionsInput, ProposalUncheckedCreateWithoutCorrectionsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutCorrectionsInput
    upsert?: ProposalUpsertWithoutCorrectionsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProposalWhereUniqueInput
    update?: XOR<ProposalUpdateWithoutCorrectionsInput, ProposalUncheckedUpdateWithoutCorrectionsInput>
  }

  export type ProposalUpdateManyWithoutSuggestionNestedInput = {
    create?: XOR<Enumerable<ProposalCreateWithoutSuggestionInput>, Enumerable<ProposalUncheckedCreateWithoutSuggestionInput>>
    connectOrCreate?: Enumerable<ProposalCreateOrConnectWithoutSuggestionInput>
    upsert?: Enumerable<ProposalUpsertWithWhereUniqueWithoutSuggestionInput>
    createMany?: ProposalCreateManySuggestionInputEnvelope
    set?: Enumerable<ProposalWhereUniqueInput>
    disconnect?: Enumerable<ProposalWhereUniqueInput>
    delete?: Enumerable<ProposalWhereUniqueInput>
    connect?: Enumerable<ProposalWhereUniqueInput>
    update?: Enumerable<ProposalUpdateWithWhereUniqueWithoutSuggestionInput>
    updateMany?: Enumerable<ProposalUpdateManyWithWhereWithoutSuggestionInput>
    deleteMany?: Enumerable<ProposalScalarWhereInput>
  }

  export type ReportUpdateManyWithoutSuggestionNestedInput = {
    create?: XOR<Enumerable<ReportCreateWithoutSuggestionInput>, Enumerable<ReportUncheckedCreateWithoutSuggestionInput>>
    connectOrCreate?: Enumerable<ReportCreateOrConnectWithoutSuggestionInput>
    upsert?: Enumerable<ReportUpsertWithWhereUniqueWithoutSuggestionInput>
    createMany?: ReportCreateManySuggestionInputEnvelope
    set?: Enumerable<ReportWhereUniqueInput>
    disconnect?: Enumerable<ReportWhereUniqueInput>
    delete?: Enumerable<ReportWhereUniqueInput>
    connect?: Enumerable<ReportWhereUniqueInput>
    update?: Enumerable<ReportUpdateWithWhereUniqueWithoutSuggestionInput>
    updateMany?: Enumerable<ReportUpdateManyWithWhereWithoutSuggestionInput>
    deleteMany?: Enumerable<ReportScalarWhereInput>
  }

  export type ApprovalUncheckedUpdateManyWithoutProposalNestedInput = {
    create?: XOR<Enumerable<ApprovalCreateWithoutProposalInput>, Enumerable<ApprovalUncheckedCreateWithoutProposalInput>>
    connectOrCreate?: Enumerable<ApprovalCreateOrConnectWithoutProposalInput>
    upsert?: Enumerable<ApprovalUpsertWithWhereUniqueWithoutProposalInput>
    createMany?: ApprovalCreateManyProposalInputEnvelope
    set?: Enumerable<ApprovalWhereUniqueInput>
    disconnect?: Enumerable<ApprovalWhereUniqueInput>
    delete?: Enumerable<ApprovalWhereUniqueInput>
    connect?: Enumerable<ApprovalWhereUniqueInput>
    update?: Enumerable<ApprovalUpdateWithWhereUniqueWithoutProposalInput>
    updateMany?: Enumerable<ApprovalUpdateManyWithWhereWithoutProposalInput>
    deleteMany?: Enumerable<ApprovalScalarWhereInput>
  }

  export type DisapprovalUncheckedUpdateManyWithoutProposalNestedInput = {
    create?: XOR<Enumerable<DisapprovalCreateWithoutProposalInput>, Enumerable<DisapprovalUncheckedCreateWithoutProposalInput>>
    connectOrCreate?: Enumerable<DisapprovalCreateOrConnectWithoutProposalInput>
    upsert?: Enumerable<DisapprovalUpsertWithWhereUniqueWithoutProposalInput>
    createMany?: DisapprovalCreateManyProposalInputEnvelope
    set?: Enumerable<DisapprovalWhereUniqueInput>
    disconnect?: Enumerable<DisapprovalWhereUniqueInput>
    delete?: Enumerable<DisapprovalWhereUniqueInput>
    connect?: Enumerable<DisapprovalWhereUniqueInput>
    update?: Enumerable<DisapprovalUpdateWithWhereUniqueWithoutProposalInput>
    updateMany?: Enumerable<DisapprovalUpdateManyWithWhereWithoutProposalInput>
    deleteMany?: Enumerable<DisapprovalScalarWhereInput>
  }

  export type VoteUncheckedUpdateManyWithoutProposalNestedInput = {
    create?: XOR<Enumerable<VoteCreateWithoutProposalInput>, Enumerable<VoteUncheckedCreateWithoutProposalInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutProposalInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutProposalInput>
    createMany?: VoteCreateManyProposalInputEnvelope
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    connect?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutProposalInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutProposalInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type ProposalUncheckedUpdateManyWithoutSuggestionNestedInput = {
    create?: XOR<Enumerable<ProposalCreateWithoutSuggestionInput>, Enumerable<ProposalUncheckedCreateWithoutSuggestionInput>>
    connectOrCreate?: Enumerable<ProposalCreateOrConnectWithoutSuggestionInput>
    upsert?: Enumerable<ProposalUpsertWithWhereUniqueWithoutSuggestionInput>
    createMany?: ProposalCreateManySuggestionInputEnvelope
    set?: Enumerable<ProposalWhereUniqueInput>
    disconnect?: Enumerable<ProposalWhereUniqueInput>
    delete?: Enumerable<ProposalWhereUniqueInput>
    connect?: Enumerable<ProposalWhereUniqueInput>
    update?: Enumerable<ProposalUpdateWithWhereUniqueWithoutSuggestionInput>
    updateMany?: Enumerable<ProposalUpdateManyWithWhereWithoutSuggestionInput>
    deleteMany?: Enumerable<ProposalScalarWhereInput>
  }

  export type ReportUncheckedUpdateManyWithoutSuggestionNestedInput = {
    create?: XOR<Enumerable<ReportCreateWithoutSuggestionInput>, Enumerable<ReportUncheckedCreateWithoutSuggestionInput>>
    connectOrCreate?: Enumerable<ReportCreateOrConnectWithoutSuggestionInput>
    upsert?: Enumerable<ReportUpsertWithWhereUniqueWithoutSuggestionInput>
    createMany?: ReportCreateManySuggestionInputEnvelope
    set?: Enumerable<ReportWhereUniqueInput>
    disconnect?: Enumerable<ReportWhereUniqueInput>
    delete?: Enumerable<ReportWhereUniqueInput>
    connect?: Enumerable<ReportWhereUniqueInput>
    update?: Enumerable<ReportUpdateWithWhereUniqueWithoutSuggestionInput>
    updateMany?: Enumerable<ReportUpdateManyWithWhereWithoutSuggestionInput>
    deleteMany?: Enumerable<ReportScalarWhereInput>
  }

  export type ProposalCreateNestedOneWithoutApprovalsInput = {
    create?: XOR<ProposalCreateWithoutApprovalsInput, ProposalUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutApprovalsInput
    connect?: ProposalWhereUniqueInput
  }

  export type ProposalUpdateOneRequiredWithoutApprovalsNestedInput = {
    create?: XOR<ProposalCreateWithoutApprovalsInput, ProposalUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutApprovalsInput
    upsert?: ProposalUpsertWithoutApprovalsInput
    connect?: ProposalWhereUniqueInput
    update?: XOR<ProposalUpdateWithoutApprovalsInput, ProposalUncheckedUpdateWithoutApprovalsInput>
  }

  export type ProposalCreateNestedOneWithoutDisapprovalsInput = {
    create?: XOR<ProposalCreateWithoutDisapprovalsInput, ProposalUncheckedCreateWithoutDisapprovalsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutDisapprovalsInput
    connect?: ProposalWhereUniqueInput
  }

  export type ProposalUpdateOneRequiredWithoutDisapprovalsNestedInput = {
    create?: XOR<ProposalCreateWithoutDisapprovalsInput, ProposalUncheckedCreateWithoutDisapprovalsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutDisapprovalsInput
    upsert?: ProposalUpsertWithoutDisapprovalsInput
    connect?: ProposalWhereUniqueInput
    update?: XOR<ProposalUpdateWithoutDisapprovalsInput, ProposalUncheckedUpdateWithoutDisapprovalsInput>
  }

  export type ProposalCreateNestedOneWithoutVotesInput = {
    create?: XOR<ProposalCreateWithoutVotesInput, ProposalUncheckedCreateWithoutVotesInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutVotesInput
    connect?: ProposalWhereUniqueInput
  }

  export type EnumVoteTypeFieldUpdateOperationsInput = {
    set?: VoteType
  }

  export type ProposalUpdateOneRequiredWithoutVotesNestedInput = {
    create?: XOR<ProposalCreateWithoutVotesInput, ProposalUncheckedCreateWithoutVotesInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutVotesInput
    upsert?: ProposalUpsertWithoutVotesInput
    connect?: ProposalWhereUniqueInput
    update?: XOR<ProposalUpdateWithoutVotesInput, ProposalUncheckedUpdateWithoutVotesInput>
  }

  export type ProposalCreateNestedOneWithoutReportsInput = {
    create?: XOR<ProposalCreateWithoutReportsInput, ProposalUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutReportsInput
    connect?: ProposalWhereUniqueInput
  }

  export type EnumReportTypeFieldUpdateOperationsInput = {
    set?: ReportType
  }

  export type ProposalUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<ProposalCreateWithoutReportsInput, ProposalUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutReportsInput
    upsert?: ProposalUpsertWithoutReportsInput
    connect?: ProposalWhereUniqueInput
    update?: XOR<ProposalUpdateWithoutReportsInput, ProposalUncheckedUpdateWithoutReportsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumProposalTypeFilter = {
    equals?: ProposalType
    in?: Enumerable<ProposalType>
    notIn?: Enumerable<ProposalType>
    not?: NestedEnumProposalTypeFilter | ProposalType
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedEnumProposalTypeWithAggregatesFilter = {
    equals?: ProposalType
    in?: Enumerable<ProposalType>
    notIn?: Enumerable<ProposalType>
    not?: NestedEnumProposalTypeWithAggregatesFilter | ProposalType
    _count?: NestedIntFilter
    _min?: NestedEnumProposalTypeFilter
    _max?: NestedEnumProposalTypeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumVoteTypeFilter = {
    equals?: VoteType
    in?: Enumerable<VoteType>
    notIn?: Enumerable<VoteType>
    not?: NestedEnumVoteTypeFilter | VoteType
  }

  export type NestedEnumVoteTypeWithAggregatesFilter = {
    equals?: VoteType
    in?: Enumerable<VoteType>
    notIn?: Enumerable<VoteType>
    not?: NestedEnumVoteTypeWithAggregatesFilter | VoteType
    _count?: NestedIntFilter
    _min?: NestedEnumVoteTypeFilter
    _max?: NestedEnumVoteTypeFilter
  }

  export type NestedEnumReportTypeFilter = {
    equals?: ReportType
    in?: Enumerable<ReportType>
    notIn?: Enumerable<ReportType>
    not?: NestedEnumReportTypeFilter | ReportType
  }

  export type NestedEnumReportTypeWithAggregatesFilter = {
    equals?: ReportType
    in?: Enumerable<ReportType>
    notIn?: Enumerable<ReportType>
    not?: NestedEnumReportTypeWithAggregatesFilter | ReportType
    _count?: NestedIntFilter
    _min?: NestedEnumReportTypeFilter
    _max?: NestedEnumReportTypeFilter
  }

  export type ApprovalCreateWithoutProposalInput = {
    user_id: string
  }

  export type ApprovalUncheckedCreateWithoutProposalInput = {
    user_id: string
  }

  export type ApprovalCreateOrConnectWithoutProposalInput = {
    where: ApprovalWhereUniqueInput
    create: XOR<ApprovalCreateWithoutProposalInput, ApprovalUncheckedCreateWithoutProposalInput>
  }

  export type ApprovalCreateManyProposalInputEnvelope = {
    data: Enumerable<ApprovalCreateManyProposalInput>
    skipDuplicates?: boolean
  }

  export type DisapprovalCreateWithoutProposalInput = {
    user_id: string
  }

  export type DisapprovalUncheckedCreateWithoutProposalInput = {
    user_id: string
  }

  export type DisapprovalCreateOrConnectWithoutProposalInput = {
    where: DisapprovalWhereUniqueInput
    create: XOR<DisapprovalCreateWithoutProposalInput, DisapprovalUncheckedCreateWithoutProposalInput>
  }

  export type DisapprovalCreateManyProposalInputEnvelope = {
    data: Enumerable<DisapprovalCreateManyProposalInput>
    skipDuplicates?: boolean
  }

  export type VoteCreateWithoutProposalInput = {
    user_id: string
    type: VoteType
  }

  export type VoteUncheckedCreateWithoutProposalInput = {
    user_id: string
    type: VoteType
  }

  export type VoteCreateOrConnectWithoutProposalInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutProposalInput, VoteUncheckedCreateWithoutProposalInput>
  }

  export type VoteCreateManyProposalInputEnvelope = {
    data: Enumerable<VoteCreateManyProposalInput>
    skipDuplicates?: boolean
  }

  export type ProposalCreateWithoutCorrectionsInput = {
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutProposalInput
    disapprovals?: DisapprovalCreateNestedManyWithoutProposalInput
    votes?: VoteCreateNestedManyWithoutProposalInput
    suggestion?: ProposalCreateNestedOneWithoutCorrectionsInput
    reports?: ReportCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalUncheckedCreateWithoutCorrectionsInput = {
    id?: number
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProposalInput
    disapprovals?: DisapprovalUncheckedCreateNestedManyWithoutProposalInput
    votes?: VoteUncheckedCreateNestedManyWithoutProposalInput
    suggestion_id?: number | null
    reports?: ReportUncheckedCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalCreateOrConnectWithoutCorrectionsInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutCorrectionsInput, ProposalUncheckedCreateWithoutCorrectionsInput>
  }

  export type ProposalCreateWithoutSuggestionInput = {
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutProposalInput
    disapprovals?: DisapprovalCreateNestedManyWithoutProposalInput
    votes?: VoteCreateNestedManyWithoutProposalInput
    corrections?: ProposalCreateNestedManyWithoutSuggestionInput
    reports?: ReportCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalUncheckedCreateWithoutSuggestionInput = {
    id?: number
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProposalInput
    disapprovals?: DisapprovalUncheckedCreateNestedManyWithoutProposalInput
    votes?: VoteUncheckedCreateNestedManyWithoutProposalInput
    corrections?: ProposalUncheckedCreateNestedManyWithoutSuggestionInput
    reports?: ReportUncheckedCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalCreateOrConnectWithoutSuggestionInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutSuggestionInput, ProposalUncheckedCreateWithoutSuggestionInput>
  }

  export type ProposalCreateManySuggestionInputEnvelope = {
    data: Enumerable<ProposalCreateManySuggestionInput>
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutSuggestionInput = {
    message_id: string
    user_id: string
    type: ReportType
  }

  export type ReportUncheckedCreateWithoutSuggestionInput = {
    message_id: string
    user_id: string
    type: ReportType
  }

  export type ReportCreateOrConnectWithoutSuggestionInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutSuggestionInput, ReportUncheckedCreateWithoutSuggestionInput>
  }

  export type ReportCreateManySuggestionInputEnvelope = {
    data: Enumerable<ReportCreateManySuggestionInput>
    skipDuplicates?: boolean
  }

  export type ApprovalUpsertWithWhereUniqueWithoutProposalInput = {
    where: ApprovalWhereUniqueInput
    update: XOR<ApprovalUpdateWithoutProposalInput, ApprovalUncheckedUpdateWithoutProposalInput>
    create: XOR<ApprovalCreateWithoutProposalInput, ApprovalUncheckedCreateWithoutProposalInput>
  }

  export type ApprovalUpdateWithWhereUniqueWithoutProposalInput = {
    where: ApprovalWhereUniqueInput
    data: XOR<ApprovalUpdateWithoutProposalInput, ApprovalUncheckedUpdateWithoutProposalInput>
  }

  export type ApprovalUpdateManyWithWhereWithoutProposalInput = {
    where: ApprovalScalarWhereInput
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyWithoutApprovalsInput>
  }

  export type ApprovalScalarWhereInput = {
    AND?: Enumerable<ApprovalScalarWhereInput>
    OR?: Enumerable<ApprovalScalarWhereInput>
    NOT?: Enumerable<ApprovalScalarWhereInput>
    proposal_id?: IntFilter | number
    user_id?: StringFilter | string
  }

  export type DisapprovalUpsertWithWhereUniqueWithoutProposalInput = {
    where: DisapprovalWhereUniqueInput
    update: XOR<DisapprovalUpdateWithoutProposalInput, DisapprovalUncheckedUpdateWithoutProposalInput>
    create: XOR<DisapprovalCreateWithoutProposalInput, DisapprovalUncheckedCreateWithoutProposalInput>
  }

  export type DisapprovalUpdateWithWhereUniqueWithoutProposalInput = {
    where: DisapprovalWhereUniqueInput
    data: XOR<DisapprovalUpdateWithoutProposalInput, DisapprovalUncheckedUpdateWithoutProposalInput>
  }

  export type DisapprovalUpdateManyWithWhereWithoutProposalInput = {
    where: DisapprovalScalarWhereInput
    data: XOR<DisapprovalUpdateManyMutationInput, DisapprovalUncheckedUpdateManyWithoutDisapprovalsInput>
  }

  export type DisapprovalScalarWhereInput = {
    AND?: Enumerable<DisapprovalScalarWhereInput>
    OR?: Enumerable<DisapprovalScalarWhereInput>
    NOT?: Enumerable<DisapprovalScalarWhereInput>
    proposal_id?: IntFilter | number
    user_id?: StringFilter | string
  }

  export type VoteUpsertWithWhereUniqueWithoutProposalInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutProposalInput, VoteUncheckedUpdateWithoutProposalInput>
    create: XOR<VoteCreateWithoutProposalInput, VoteUncheckedCreateWithoutProposalInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutProposalInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutProposalInput, VoteUncheckedUpdateWithoutProposalInput>
  }

  export type VoteUpdateManyWithWhereWithoutProposalInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutVotesInput>
  }

  export type VoteScalarWhereInput = {
    AND?: Enumerable<VoteScalarWhereInput>
    OR?: Enumerable<VoteScalarWhereInput>
    NOT?: Enumerable<VoteScalarWhereInput>
    proposal_id?: IntFilter | number
    user_id?: StringFilter | string
    type?: EnumVoteTypeFilter | VoteType
  }

  export type ProposalUpsertWithoutCorrectionsInput = {
    update: XOR<ProposalUpdateWithoutCorrectionsInput, ProposalUncheckedUpdateWithoutCorrectionsInput>
    create: XOR<ProposalCreateWithoutCorrectionsInput, ProposalUncheckedCreateWithoutCorrectionsInput>
  }

  export type ProposalUpdateWithoutCorrectionsInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutProposalNestedInput
    disapprovals?: DisapprovalUpdateManyWithoutProposalNestedInput
    votes?: VoteUpdateManyWithoutProposalNestedInput
    suggestion?: ProposalUpdateOneWithoutCorrectionsNestedInput
    reports?: ReportUpdateManyWithoutSuggestionNestedInput
  }

  export type ProposalUncheckedUpdateWithoutCorrectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutProposalNestedInput
    disapprovals?: DisapprovalUncheckedUpdateManyWithoutProposalNestedInput
    votes?: VoteUncheckedUpdateManyWithoutProposalNestedInput
    suggestion_id?: NullableIntFieldUpdateOperationsInput | number | null
    reports?: ReportUncheckedUpdateManyWithoutSuggestionNestedInput
  }

  export type ProposalUpsertWithWhereUniqueWithoutSuggestionInput = {
    where: ProposalWhereUniqueInput
    update: XOR<ProposalUpdateWithoutSuggestionInput, ProposalUncheckedUpdateWithoutSuggestionInput>
    create: XOR<ProposalCreateWithoutSuggestionInput, ProposalUncheckedCreateWithoutSuggestionInput>
  }

  export type ProposalUpdateWithWhereUniqueWithoutSuggestionInput = {
    where: ProposalWhereUniqueInput
    data: XOR<ProposalUpdateWithoutSuggestionInput, ProposalUncheckedUpdateWithoutSuggestionInput>
  }

  export type ProposalUpdateManyWithWhereWithoutSuggestionInput = {
    where: ProposalScalarWhereInput
    data: XOR<ProposalUpdateManyMutationInput, ProposalUncheckedUpdateManyWithoutCorrectionsInput>
  }

  export type ProposalScalarWhereInput = {
    AND?: Enumerable<ProposalScalarWhereInput>
    OR?: Enumerable<ProposalScalarWhereInput>
    NOT?: Enumerable<ProposalScalarWhereInput>
    id?: IntFilter | number
    user_id?: StringNullableFilter | string | null
    message_id?: StringNullableFilter | string | null
    type?: EnumProposalTypeFilter | ProposalType
    joke_id?: IntNullableFilter | number | null
    joke_type?: StringNullableFilter | string | null
    joke_question?: StringNullableFilter | string | null
    joke_answer?: StringNullableFilter | string | null
    merged?: BoolFilter | boolean
    refused?: BoolFilter | boolean
    stale?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    suggestion_id?: IntNullableFilter | number | null
  }

  export type ReportUpsertWithWhereUniqueWithoutSuggestionInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutSuggestionInput, ReportUncheckedUpdateWithoutSuggestionInput>
    create: XOR<ReportCreateWithoutSuggestionInput, ReportUncheckedCreateWithoutSuggestionInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutSuggestionInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutSuggestionInput, ReportUncheckedUpdateWithoutSuggestionInput>
  }

  export type ReportUpdateManyWithWhereWithoutSuggestionInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutReportsInput>
  }

  export type ReportScalarWhereInput = {
    AND?: Enumerable<ReportScalarWhereInput>
    OR?: Enumerable<ReportScalarWhereInput>
    NOT?: Enumerable<ReportScalarWhereInput>
    suggestion_id?: IntFilter | number
    message_id?: StringFilter | string
    user_id?: StringFilter | string
    type?: EnumReportTypeFilter | ReportType
  }

  export type ProposalCreateWithoutApprovalsInput = {
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    disapprovals?: DisapprovalCreateNestedManyWithoutProposalInput
    votes?: VoteCreateNestedManyWithoutProposalInput
    suggestion?: ProposalCreateNestedOneWithoutCorrectionsInput
    corrections?: ProposalCreateNestedManyWithoutSuggestionInput
    reports?: ReportCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalUncheckedCreateWithoutApprovalsInput = {
    id?: number
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    disapprovals?: DisapprovalUncheckedCreateNestedManyWithoutProposalInput
    votes?: VoteUncheckedCreateNestedManyWithoutProposalInput
    suggestion_id?: number | null
    corrections?: ProposalUncheckedCreateNestedManyWithoutSuggestionInput
    reports?: ReportUncheckedCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalCreateOrConnectWithoutApprovalsInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutApprovalsInput, ProposalUncheckedCreateWithoutApprovalsInput>
  }

  export type ProposalUpsertWithoutApprovalsInput = {
    update: XOR<ProposalUpdateWithoutApprovalsInput, ProposalUncheckedUpdateWithoutApprovalsInput>
    create: XOR<ProposalCreateWithoutApprovalsInput, ProposalUncheckedCreateWithoutApprovalsInput>
  }

  export type ProposalUpdateWithoutApprovalsInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    disapprovals?: DisapprovalUpdateManyWithoutProposalNestedInput
    votes?: VoteUpdateManyWithoutProposalNestedInput
    suggestion?: ProposalUpdateOneWithoutCorrectionsNestedInput
    corrections?: ProposalUpdateManyWithoutSuggestionNestedInput
    reports?: ReportUpdateManyWithoutSuggestionNestedInput
  }

  export type ProposalUncheckedUpdateWithoutApprovalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    disapprovals?: DisapprovalUncheckedUpdateManyWithoutProposalNestedInput
    votes?: VoteUncheckedUpdateManyWithoutProposalNestedInput
    suggestion_id?: NullableIntFieldUpdateOperationsInput | number | null
    corrections?: ProposalUncheckedUpdateManyWithoutSuggestionNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSuggestionNestedInput
  }

  export type ProposalCreateWithoutDisapprovalsInput = {
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutProposalInput
    votes?: VoteCreateNestedManyWithoutProposalInput
    suggestion?: ProposalCreateNestedOneWithoutCorrectionsInput
    corrections?: ProposalCreateNestedManyWithoutSuggestionInput
    reports?: ReportCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalUncheckedCreateWithoutDisapprovalsInput = {
    id?: number
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProposalInput
    votes?: VoteUncheckedCreateNestedManyWithoutProposalInput
    suggestion_id?: number | null
    corrections?: ProposalUncheckedCreateNestedManyWithoutSuggestionInput
    reports?: ReportUncheckedCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalCreateOrConnectWithoutDisapprovalsInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutDisapprovalsInput, ProposalUncheckedCreateWithoutDisapprovalsInput>
  }

  export type ProposalUpsertWithoutDisapprovalsInput = {
    update: XOR<ProposalUpdateWithoutDisapprovalsInput, ProposalUncheckedUpdateWithoutDisapprovalsInput>
    create: XOR<ProposalCreateWithoutDisapprovalsInput, ProposalUncheckedCreateWithoutDisapprovalsInput>
  }

  export type ProposalUpdateWithoutDisapprovalsInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutProposalNestedInput
    votes?: VoteUpdateManyWithoutProposalNestedInput
    suggestion?: ProposalUpdateOneWithoutCorrectionsNestedInput
    corrections?: ProposalUpdateManyWithoutSuggestionNestedInput
    reports?: ReportUpdateManyWithoutSuggestionNestedInput
  }

  export type ProposalUncheckedUpdateWithoutDisapprovalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutProposalNestedInput
    votes?: VoteUncheckedUpdateManyWithoutProposalNestedInput
    suggestion_id?: NullableIntFieldUpdateOperationsInput | number | null
    corrections?: ProposalUncheckedUpdateManyWithoutSuggestionNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSuggestionNestedInput
  }

  export type ProposalCreateWithoutVotesInput = {
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutProposalInput
    disapprovals?: DisapprovalCreateNestedManyWithoutProposalInput
    suggestion?: ProposalCreateNestedOneWithoutCorrectionsInput
    corrections?: ProposalCreateNestedManyWithoutSuggestionInput
    reports?: ReportCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalUncheckedCreateWithoutVotesInput = {
    id?: number
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProposalInput
    disapprovals?: DisapprovalUncheckedCreateNestedManyWithoutProposalInput
    suggestion_id?: number | null
    corrections?: ProposalUncheckedCreateNestedManyWithoutSuggestionInput
    reports?: ReportUncheckedCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalCreateOrConnectWithoutVotesInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutVotesInput, ProposalUncheckedCreateWithoutVotesInput>
  }

  export type ProposalUpsertWithoutVotesInput = {
    update: XOR<ProposalUpdateWithoutVotesInput, ProposalUncheckedUpdateWithoutVotesInput>
    create: XOR<ProposalCreateWithoutVotesInput, ProposalUncheckedCreateWithoutVotesInput>
  }

  export type ProposalUpdateWithoutVotesInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutProposalNestedInput
    disapprovals?: DisapprovalUpdateManyWithoutProposalNestedInput
    suggestion?: ProposalUpdateOneWithoutCorrectionsNestedInput
    corrections?: ProposalUpdateManyWithoutSuggestionNestedInput
    reports?: ReportUpdateManyWithoutSuggestionNestedInput
  }

  export type ProposalUncheckedUpdateWithoutVotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutProposalNestedInput
    disapprovals?: DisapprovalUncheckedUpdateManyWithoutProposalNestedInput
    suggestion_id?: NullableIntFieldUpdateOperationsInput | number | null
    corrections?: ProposalUncheckedUpdateManyWithoutSuggestionNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSuggestionNestedInput
  }

  export type ProposalCreateWithoutReportsInput = {
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutProposalInput
    disapprovals?: DisapprovalCreateNestedManyWithoutProposalInput
    votes?: VoteCreateNestedManyWithoutProposalInput
    suggestion?: ProposalCreateNestedOneWithoutCorrectionsInput
    corrections?: ProposalCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalUncheckedCreateWithoutReportsInput = {
    id?: number
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProposalInput
    disapprovals?: DisapprovalUncheckedCreateNestedManyWithoutProposalInput
    votes?: VoteUncheckedCreateNestedManyWithoutProposalInput
    suggestion_id?: number | null
    corrections?: ProposalUncheckedCreateNestedManyWithoutSuggestionInput
  }

  export type ProposalCreateOrConnectWithoutReportsInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutReportsInput, ProposalUncheckedCreateWithoutReportsInput>
  }

  export type ProposalUpsertWithoutReportsInput = {
    update: XOR<ProposalUpdateWithoutReportsInput, ProposalUncheckedUpdateWithoutReportsInput>
    create: XOR<ProposalCreateWithoutReportsInput, ProposalUncheckedCreateWithoutReportsInput>
  }

  export type ProposalUpdateWithoutReportsInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutProposalNestedInput
    disapprovals?: DisapprovalUpdateManyWithoutProposalNestedInput
    votes?: VoteUpdateManyWithoutProposalNestedInput
    suggestion?: ProposalUpdateOneWithoutCorrectionsNestedInput
    corrections?: ProposalUpdateManyWithoutSuggestionNestedInput
  }

  export type ProposalUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutProposalNestedInput
    disapprovals?: DisapprovalUncheckedUpdateManyWithoutProposalNestedInput
    votes?: VoteUncheckedUpdateManyWithoutProposalNestedInput
    suggestion_id?: NullableIntFieldUpdateOperationsInput | number | null
    corrections?: ProposalUncheckedUpdateManyWithoutSuggestionNestedInput
  }

  export type ApprovalCreateManyProposalInput = {
    user_id: string
  }

  export type DisapprovalCreateManyProposalInput = {
    user_id: string
  }

  export type VoteCreateManyProposalInput = {
    user_id: string
    type: VoteType
  }

  export type ProposalCreateManySuggestionInput = {
    id?: number
    user_id?: string | null
    message_id?: string | null
    type: ProposalType
    joke_id?: number | null
    joke_type?: string | null
    joke_question?: string | null
    joke_answer?: string | null
    merged?: boolean
    refused?: boolean
    stale?: boolean
    created_at?: Date | string
  }

  export type ReportCreateManySuggestionInput = {
    message_id: string
    user_id: string
    type: ReportType
  }

  export type ApprovalUpdateWithoutProposalInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type ApprovalUncheckedUpdateWithoutProposalInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type ApprovalUncheckedUpdateManyWithoutApprovalsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type DisapprovalUpdateWithoutProposalInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type DisapprovalUncheckedUpdateWithoutProposalInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type DisapprovalUncheckedUpdateManyWithoutDisapprovalsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type VoteUpdateWithoutProposalInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumVoteTypeFieldUpdateOperationsInput | VoteType
  }

  export type VoteUncheckedUpdateWithoutProposalInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumVoteTypeFieldUpdateOperationsInput | VoteType
  }

  export type VoteUncheckedUpdateManyWithoutVotesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumVoteTypeFieldUpdateOperationsInput | VoteType
  }

  export type ProposalUpdateWithoutSuggestionInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutProposalNestedInput
    disapprovals?: DisapprovalUpdateManyWithoutProposalNestedInput
    votes?: VoteUpdateManyWithoutProposalNestedInput
    corrections?: ProposalUpdateManyWithoutSuggestionNestedInput
    reports?: ReportUpdateManyWithoutSuggestionNestedInput
  }

  export type ProposalUncheckedUpdateWithoutSuggestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutProposalNestedInput
    disapprovals?: DisapprovalUncheckedUpdateManyWithoutProposalNestedInput
    votes?: VoteUncheckedUpdateManyWithoutProposalNestedInput
    corrections?: ProposalUncheckedUpdateManyWithoutSuggestionNestedInput
    reports?: ReportUncheckedUpdateManyWithoutSuggestionNestedInput
  }

  export type ProposalUncheckedUpdateManyWithoutCorrectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    message_id?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumProposalTypeFieldUpdateOperationsInput | ProposalType
    joke_id?: NullableIntFieldUpdateOperationsInput | number | null
    joke_type?: NullableStringFieldUpdateOperationsInput | string | null
    joke_question?: NullableStringFieldUpdateOperationsInput | string | null
    joke_answer?: NullableStringFieldUpdateOperationsInput | string | null
    merged?: BoolFieldUpdateOperationsInput | boolean
    refused?: BoolFieldUpdateOperationsInput | boolean
    stale?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutSuggestionInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumReportTypeFieldUpdateOperationsInput | ReportType
  }

  export type ReportUncheckedUpdateWithoutSuggestionInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumReportTypeFieldUpdateOperationsInput | ReportType
  }

  export type ReportUncheckedUpdateManyWithoutReportsInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    type?: EnumReportTypeFieldUpdateOperationsInput | ReportType
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}